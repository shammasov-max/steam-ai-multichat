{
  "config": {
    "configFile": "X:\\a\\dialog-ai-service\\playwright.config.ts",
    "rootDir": "X:/a/dialog-ai-service/tests",
    "forbidOnly": false,
    "fullyParallel": true,
    "globalSetup": "X:\\a\\dialog-ai-service\\tests\\setup\\global-setup.ts",
    "globalTeardown": "X:\\a\\dialog-ai-service\\tests\\setup\\global-teardown.ts",
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 8
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "json",
        {
          "outputFile": "test-results/results.json"
        }
      ],
      [
        "junit",
        {
          "outputFile": "test-results/results.xml"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "X:/a/dialog-ai-service/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 8
        },
        "id": "unit-tests",
        "name": "unit-tests",
        "testDir": "X:/a/dialog-ai-service/tests/unit",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      },
      {
        "outputDir": "X:/a/dialog-ai-service/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 8
        },
        "id": "integration-tests",
        "name": "integration-tests",
        "testDir": "X:/a/dialog-ai-service/tests/integration",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      },
      {
        "outputDir": "X:/a/dialog-ai-service/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 8
        },
        "id": "database-tests",
        "name": "database-tests",
        "testDir": "X:/a/dialog-ai-service/tests/database",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      },
      {
        "outputDir": "X:/a/dialog-ai-service/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 8
        },
        "id": "e2e-tests",
        "name": "e2e-tests",
        "testDir": "X:/a/dialog-ai-service/tests/e2e",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      },
      {
        "outputDir": "X:/a/dialog-ai-service/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 8
        },
        "id": "performance-tests",
        "name": "performance-tests",
        "testDir": "X:/a/dialog-ai-service/tests/performance",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 60000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.55.0",
    "workers": 8,
    "webServer": null
  },
  "suites": [
    {
      "title": "integration\\DialogManager.test.ts",
      "file": "integration/DialogManager.test.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "DialogManager Integration Tests",
          "file": "integration/DialogManager.test.ts",
          "line": 8,
          "column": 6,
          "specs": [],
          "suites": [
            {
              "title": "Dialog Creation",
              "file": "integration/DialogManager.test.ts",
              "line": 33,
              "column": 8,
              "specs": [
                {
                  "title": "should create dialog successfully with valid parameters",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 0,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 27,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.182Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-7afd9236b1fb0c176f7d",
                  "file": "integration/DialogManager.test.ts",
                  "line": 34,
                  "column": 9
                },
                {
                  "title": "should create dialog with minimal parameters",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 1,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 54,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.576Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-dae39acd5260ba095fb4",
                  "file": "integration/DialogManager.test.ts",
                  "line": 48,
                  "column": 9
                },
                {
                  "title": "should create dialog with Chinese language parameters",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 2,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 14,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:10.920Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-0b2ab9a484cb915753c8",
                  "file": "integration/DialogManager.test.ts",
                  "line": 64,
                  "column": 9
                },
                {
                  "title": "should create dialog with complex completion criteria",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 3,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 26,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.370Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-454f3ad15130a8e2c269",
                  "file": "integration/DialogManager.test.ts",
                  "line": 82,
                  "column": 9
                },
                {
                  "title": "should create dialog with negotiation settings",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 4,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 19,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.221Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-1e0117de9430f8190648",
                  "file": "integration/DialogManager.test.ts",
                  "line": 99,
                  "column": 9
                },
                {
                  "title": "should handle database errors during dialog creation",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 5,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 24,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.795Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-ed7ca0392a9a49ed0bde",
                  "file": "integration/DialogManager.test.ts",
                  "line": 117,
                  "column": 9
                },
                {
                  "title": "should log dialog creation events",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 6,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 25,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:10.978Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-9eaf8883efcbb9e19953",
                  "file": "integration/DialogManager.test.ts",
                  "line": 124,
                  "column": 9
                }
              ]
            },
            {
              "title": "Message Processing",
              "file": "integration/DialogManager.test.ts",
              "line": 141,
              "column": 8,
              "specs": [
                {
                  "title": "should process message successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 34,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.081Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-b62d1bac6b7878cf3779",
                  "file": "integration/DialogManager.test.ts",
                  "line": 142,
                  "column": 9
                },
                {
                  "title": "should process Chinese message correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 2,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 10,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.022Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-c025f1fcab9162fe933a",
                  "file": "integration/DialogManager.test.ts",
                  "line": 165,
                  "column": 9
                },
                {
                  "title": "should process Japanese message correctly",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 6,
                          "parallelIndex": 6,
                          "status": "failed",
                          "duration": 64,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ja\"\u001b[39m\nReceived: \u001b[31m\"zh\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ja\"\u001b[39m\nReceived: \u001b[31m\"zh\"\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts:202:49",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                              "column": 49,
                              "line": 202
                            },
                            "snippet": "  200 |       expect(result.dialogId).toBe(dialogId);\n  201 |       expect(result.responseMessages[0].text).toContain('ゲームコーチング');\n> 202 |       expect(result.dialogState.languageActive).toBe('ja');\n      |                                                 ^\n  203 |     });\n  204 |\n  205 |     test('should handle dialog not found error', async () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                                "column": 49,
                                "line": 202
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ja\"\u001b[39m\nReceived: \u001b[31m\"zh\"\u001b[39m\n\n  200 |       expect(result.dialogId).toBe(dialogId);\n  201 |       expect(result.responseMessages[0].text).toContain('ゲームコーチング');\n> 202 |       expect(result.dialogState.languageActive).toBe('ja');\n      |                                                 ^\n  203 |     });\n  204 |\n  205 |     test('should handle dialog not found error', async () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts:202:49\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.046Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                            "column": 49,
                            "line": 202
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-990b35d78cae3cb93851",
                  "file": "integration/DialogManager.test.ts",
                  "line": 185,
                  "column": 9
                },
                {
                  "title": "should handle dialog not found error",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 2,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 9,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.047Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-70c170fa6f4b74cc8167",
                  "file": "integration/DialogManager.test.ts",
                  "line": 205,
                  "column": 9
                },
                {
                  "title": "should handle inactive dialog status",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 2,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.074Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-b4207f90f8273080170a",
                  "file": "integration/DialogManager.test.ts",
                  "line": 216,
                  "column": 9
                },
                {
                  "title": "should calculate continuation score and detect issues",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 2,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 14,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.116Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-51f5db8070a31c961f6e",
                  "file": "integration/DialogManager.test.ts",
                  "line": 237,
                  "column": 9
                },
                {
                  "title": "should track token usage correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 8,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 32,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:15.837Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-f85f1b71ecccecbde8cd",
                  "file": "integration/DialogManager.test.ts",
                  "line": 272,
                  "column": 9
                },
                {
                  "title": "should generate operator alerts for critical issues",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 2,
                          "parallelIndex": 2,
                          "status": "failed",
                          "duration": 5,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mundefined\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mundefined\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts:322:54",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                              "column": 54,
                              "line": 322
                            },
                            "snippet": "  320 |       const result = await dialogManager.processMessage(messageParams);\n  321 |\n> 322 |       expect(result.successAssessment.operatorAlert).toBeDefined();\n      |                                                      ^\n  323 |       expect(result.successAssessment.operatorAlert!.required).toBe(true);\n  324 |       expect(result.successAssessment.operatorAlert!.urgency).toMatch(/^(medium|high|critical)$/);\n  325 |     });"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                                "column": 54,
                                "line": 322
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mundefined\u001b[39m\n\n  320 |       const result = await dialogManager.processMessage(messageParams);\n  321 |\n> 322 |       expect(result.successAssessment.operatorAlert).toBeDefined();\n      |                                                      ^\n  323 |       expect(result.successAssessment.operatorAlert!.required).toBe(true);\n  324 |       expect(result.successAssessment.operatorAlert!.urgency).toMatch(/^(medium|high|critical)$/);\n  325 |     });\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts:322:54\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.161Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                            "column": 54,
                            "line": 322
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-987fec3dff164e39277f",
                  "file": "integration/DialogManager.test.ts",
                  "line": 292,
                  "column": 9
                },
                {
                  "title": "should handle OpenAI API errors during message processing",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 9,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 25,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            },
                            {
                              "text": "OpenAI API error: Error: OpenAI API connection failed\n    at MockOpenAI.mockConnectionError \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mtests\\mocks\\mock-openai.ts:91:20\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mtests\\integration\\DialogManager.test.ts:330:18\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:309:15\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:326:17\n    at TimeoutManager.withRunnable \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\timeoutManager.js:68:9\u001b[90m)\u001b[39m\n    at TestInfoImpl._runWithTimeout \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:324:34\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:307:22\n    at WorkerMain._runTest \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:282:5\u001b[90m)\u001b[39m\n    at WorkerMain.runTestGroup \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:194:11\u001b[90m)\u001b[39m\n    at process.<anonymous> \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\common\\process.js:65:22\u001b[90m)\u001b[39m\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:15.516Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-9e69ee0819c8749577be",
                  "file": "integration/DialogManager.test.ts",
                  "line": 327,
                  "column": 9
                },
                {
                  "title": "should compress context for long conversations",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.196Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-ebc65c10ac02a93f9306",
                  "file": "integration/DialogManager.test.ts",
                  "line": 340,
                  "column": 9
                }
              ]
            },
            {
              "title": "Dialog State Management",
              "file": "integration/DialogManager.test.ts",
              "line": 384,
              "column": 8,
              "specs": [
                {
                  "title": "should retrieve dialog state successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 7,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.217Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-5566231824d3648a1548",
                  "file": "integration/DialogManager.test.ts",
                  "line": 385,
                  "column": 9
                },
                {
                  "title": "should handle dialog not found for state retrieval",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 0,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 28,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.260Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-3ce5f8b6ee801aea49f2",
                  "file": "integration/DialogManager.test.ts",
                  "line": 401,
                  "column": 9
                },
                {
                  "title": "should return correct state for dialog without messages",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 5,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.260Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-8da4ead8f10b961dd77c",
                  "file": "integration/DialogManager.test.ts",
                  "line": 407,
                  "column": 9
                }
              ]
            },
            {
              "title": "Dialog Control Operations",
              "file": "integration/DialogManager.test.ts",
              "line": 430,
              "column": 8,
              "specs": [
                {
                  "title": "should pause dialog successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 4,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 13,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.300Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-d8ccf801bb2b13b5f6c9",
                  "file": "integration/DialogManager.test.ts",
                  "line": 431,
                  "column": 9
                },
                {
                  "title": "should resume dialog successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.345Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-e54fd64773d7848a4529",
                  "file": "integration/DialogManager.test.ts",
                  "line": 450,
                  "column": 9
                },
                {
                  "title": "should complete dialog successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 0,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 11,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.347Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-b4a9cf8d9d37286b3bf7",
                  "file": "integration/DialogManager.test.ts",
                  "line": 469,
                  "column": 9
                },
                {
                  "title": "should escalate dialog successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 4,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.396Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-628430f82d0a89bc63e3",
                  "file": "integration/DialogManager.test.ts",
                  "line": 488,
                  "column": 9
                },
                {
                  "title": "should handle control operation on non-existent dialog",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 7,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.397Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-68126757ef39d85872c5",
                  "file": "integration/DialogManager.test.ts",
                  "line": 507,
                  "column": 9
                },
                {
                  "title": "should log control operations",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 0,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.397Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-abea1f42a557d8cb1537",
                  "file": "integration/DialogManager.test.ts",
                  "line": 513,
                  "column": 9
                },
                {
                  "title": "should handle database errors during control operations",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.459Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-14d6b426fc89507113fb",
                  "file": "integration/DialogManager.test.ts",
                  "line": 534,
                  "column": 9
                }
              ]
            },
            {
              "title": "Configuration and Setup",
              "file": "integration/DialogManager.test.ts",
              "line": 549,
              "column": 8,
              "specs": [
                {
                  "title": "should load configuration from provided path",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 0,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            },
                            {
                              "text": "Could not load config from ./test-config.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.459Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-47cf41f6106e5557de1a",
                  "file": "integration/DialogManager.test.ts",
                  "line": 550,
                  "column": 9
                },
                {
                  "title": "should use default configuration when file not found",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 4,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 5,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            },
                            {
                              "text": "Could not load config from ./non-existent-config.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.459Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-b99d694a6f0bd76005ea",
                  "file": "integration/DialogManager.test.ts",
                  "line": 561,
                  "column": 9
                },
                {
                  "title": "should initialize all services correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 3,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 11,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            },
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.485Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-f8f611c3f9195af2c34b",
                  "file": "integration/DialogManager.test.ts",
                  "line": 571,
                  "column": 9
                },
                {
                  "title": "should close database connection",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 7,
                          "parallelIndex": 7,
                          "status": "failed",
                          "duration": 12,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n\u001b[1mMatcher error\u001b[22m: \u001b[31mreceived\u001b[39m value must be a mock or spy function\n\nReceived has type:  function\nReceived has value: \u001b[31m[Function functionStub]\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n\u001b[1mMatcher error\u001b[22m: \u001b[31mreceived\u001b[39m value must be a mock or spy function\n\nReceived has type:  function\nReceived has value: \u001b[31m[Function functionStub]\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts:587:54",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                              "column": 54,
                              "line": 587
                            },
                            "snippet": "  585 |       await manager.close();\n  586 |       \n> 587 |       expect(mockPrisma.getMockClient().$disconnect).toHaveBeenCalled();\n      |                                                      ^\n  588 |     });\n  589 |   });\n  590 |"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                                "column": 54,
                                "line": 587
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n\u001b[1mMatcher error\u001b[22m: \u001b[31mreceived\u001b[39m value must be a mock or spy function\n\nReceived has type:  function\nReceived has value: \u001b[31m[Function functionStub]\u001b[39m\n\n  585 |       await manager.close();\n  586 |       \n> 587 |       expect(mockPrisma.getMockClient().$disconnect).toHaveBeenCalled();\n      |                                                      ^\n  588 |     });\n  589 |   });\n  590 |\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts:587:54\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.526Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\integration\\DialogManager.test.ts",
                            "column": 54,
                            "line": 587
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-b67d7da159de02be5564",
                  "file": "integration/DialogManager.test.ts",
                  "line": 581,
                  "column": 9
                }
              ]
            },
            {
              "title": "Error Handling and Logging",
              "file": "integration/DialogManager.test.ts",
              "line": 591,
              "column": 8,
              "specs": [
                {
                  "title": "should log errors during dialog creation",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 0,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 5,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.526Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-1a854eb6441cb06e8879",
                  "file": "integration/DialogManager.test.ts",
                  "line": 592,
                  "column": 9
                },
                {
                  "title": "should log errors during message processing",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 4,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            },
                            {
                              "text": "OpenAI API error: Error: OpenAI API connection failed\n    at MockOpenAI.mockConnectionError \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mtests\\mocks\\mock-openai.ts:91:20\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mtests\\integration\\DialogManager.test.ts:614:18\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:309:15\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:326:17\n    at TimeoutManager.withRunnable \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\timeoutManager.js:68:9\u001b[90m)\u001b[39m\n    at TestInfoImpl._runWithTimeout \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:324:34\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:307:22\n    at WorkerMain._runTest \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:282:5\u001b[90m)\u001b[39m\n    at WorkerMain.runTestGroup \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:194:11\u001b[90m)\u001b[39m\n    at process.<anonymous> \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\common\\process.js:65:22\u001b[90m)\u001b[39m\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.526Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-d02c955dc3d138e671d6",
                  "file": "integration/DialogManager.test.ts",
                  "line": 611,
                  "column": 9
                },
                {
                  "title": "should log errors during control operations",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "integration-tests",
                      "projectName": "integration-tests",
                      "results": [
                        {
                          "workerIndex": 3,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [
                            {
                              "text": "Could not load config from ./config/test.yaml, using defaults\n"
                            }
                          ],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:11.603Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "bbd27589169dd4ca513b-2a7fb626ed164155804f",
                  "file": "integration/DialogManager.test.ts",
                  "line": 636,
                  "column": 9
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "unit\\AIService.test.ts",
      "file": "unit/AIService.test.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "AIService Unit Tests",
          "file": "unit/AIService.test.ts",
          "line": 6,
          "column": 6,
          "specs": [
            {
              "title": "should initialize with default configuration",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 10,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 41,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.267Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-32e8e184bf4080fe60cf",
              "file": "unit/AIService.test.ts",
              "line": 29,
              "column": 7
            },
            {
              "title": "should initialize with custom configuration",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 19,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.088Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-58c087fb35c3ac1ebe8d",
              "file": "unit/AIService.test.ts",
              "line": 35,
              "column": 7
            },
            {
              "title": "should generate response for English conversation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 12,
                      "parallelIndex": 7,
                      "status": "failed",
                      "duration": 30,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"string\"\u001b[39m\nReceived: \u001b[31m\"undefined\"\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"string\"\u001b[39m\nReceived: \u001b[31m\"undefined\"\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts:67:36",
                        "location": {
                          "file": "X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts",
                          "column": 36,
                          "line": 67
                        },
                        "snippet": "  65 |     expect(result.text).toBe('Hello! I can help you with our gaming service.');\n  66 |     expect(result.tokensUsed).toBe(150);\n> 67 |     expect(typeof result.strategy).toBe('string');\n     |                                    ^\n  68 |   });\n  69 |\n  70 |   test('should generate response for Chinese conversation', async () => {"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts",
                            "column": 36,
                            "line": 67
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"string\"\u001b[39m\nReceived: \u001b[31m\"undefined\"\u001b[39m\n\n  65 |     expect(result.text).toBe('Hello! I can help you with our gaming service.');\n  66 |     expect(result.tokensUsed).toBe(150);\n> 67 |     expect(typeof result.strategy).toBe('string');\n     |                                    ^\n  68 |   });\n  69 |\n  70 |   test('should generate response for Chinese conversation', async () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts:67:36\u001b[22m"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.315Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts",
                        "column": 36,
                        "line": 67
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-1ecf9d8e6281e2ad99fa",
              "file": "unit/AIService.test.ts",
              "line": 45,
              "column": 7
            },
            {
              "title": "should generate response for Chinese conversation",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "passed",
                      "duration": 12,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.127Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-ab9c3728d1c7a095b781",
              "file": "unit/AIService.test.ts",
              "line": 70,
              "column": 7
            },
            {
              "title": "should generate response for Japanese conversation",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 14,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 17,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.402Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-1aa3aa01a41b65a5313d",
              "file": "unit/AIService.test.ts",
              "line": 94,
              "column": 7
            },
            {
              "title": "should handle completion criteria for user agreement",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 15,
                      "parallelIndex": 5,
                      "status": "passed",
                      "duration": 14,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.390Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-7183bd1cba2955059991",
              "file": "unit/AIService.test.ts",
              "line": 118,
              "column": 7
            },
            {
              "title": "should handle completion criteria for link requirement",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 7,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.148Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-139bd5bd562318352a72",
              "file": "unit/AIService.test.ts",
              "line": 146,
              "column": 7
            },
            {
              "title": "should include user information in system prompt",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "passed",
                      "duration": 3,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.171Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-60a25b9120bd95db6b3f",
              "file": "unit/AIService.test.ts",
              "line": 173,
              "column": 7
            },
            {
              "title": "should include reference context when provided",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 8,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.181Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-f604a2eaae0a0dea50f4",
              "file": "unit/AIService.test.ts",
              "line": 204,
              "column": 7
            },
            {
              "title": "should calculate appropriate max tokens",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "passed",
                      "duration": 3,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.191Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-132d2a834b0fa8db0fff",
              "file": "unit/AIService.test.ts",
              "line": 230,
              "column": 7
            },
            {
              "title": "should extract strategy from response",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 2,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.201Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-90044cab2ae975520e78",
              "file": "unit/AIService.test.ts",
              "line": 260,
              "column": 7
            },
            {
              "title": "should clean internal markers from response",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "passed",
                      "duration": 3,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.210Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-fe8321ecb618d2a67106",
              "file": "unit/AIService.test.ts",
              "line": 285,
              "column": 7
            },
            {
              "title": "should handle OpenAI API errors gracefully",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 6,
                      "errors": [],
                      "stdout": [],
                      "stderr": [
                        {
                          "text": "OpenAI API error: Error: OpenAI API connection failed\n    at MockOpenAI.mockConnectionError \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mtests\\mocks\\mock-openai.ts:91:20\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mtests\\unit\\AIService.test.ts:312:16\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:309:15\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:326:17\n    at TimeoutManager.withRunnable \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\timeoutManager.js:68:9\u001b[90m)\u001b[39m\n    at TestInfoImpl._runWithTimeout \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:324:34\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:307:22\n    at WorkerMain._runTest \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:282:5\u001b[90m)\u001b[39m\n    at WorkerMain.runTestGroup \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:194:11\u001b[90m)\u001b[39m\n    at process.<anonymous> \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\common\\process.js:65:22\u001b[90m)\u001b[39m\n"
                        }
                      ],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.216Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-c144adbe285125dfcf1d",
              "file": "unit/AIService.test.ts",
              "line": 311,
              "column": 7
            },
            {
              "title": "should test connection successfully",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 8,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts:334:20",
                        "location": {
                          "file": "X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts",
                          "column": 20,
                          "line": 334
                        },
                        "snippet": "  332 |   test('should test connection successfully', async () => {\n  333 |     const result = await aiService.testConnection();\n> 334 |     expect(result).toBe(true);\n      |                    ^\n  335 |   });\n  336 |\n  337 |   test('should handle connection test failure', async () => {"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts",
                            "column": 20,
                            "line": 334
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n\n  332 |   test('should test connection successfully', async () => {\n  333 |     const result = await aiService.testConnection();\n> 334 |     expect(result).toBe(true);\n      |                    ^\n  335 |   });\n  336 |\n  337 |   test('should handle connection test failure', async () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts:334:20\u001b[22m"
                        }
                      ],
                      "stdout": [],
                      "stderr": [
                        {
                          "text": "OpenAI connection test failed: TypeError: Cannot read properties of undefined (reading 'data')\n    at AIService.testConnection \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39msrc\\services\\AIService.ts:169:23\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mtests\\unit\\AIService.test.ts:333:20\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:309:9\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:326:11\n    at TimeoutManager.withRunnable \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\timeoutManager.js:67:14\u001b[90m)\u001b[39m\n    at TestInfoImpl._runWithTimeout \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:324:7\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:307:7\n    at WorkerMain._runTest \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:282:5\u001b[90m)\u001b[39m\n    at WorkerMain.runTestGroup \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:194:11\u001b[90m)\u001b[39m\n    at process.<anonymous> \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\common\\process.js:65:22\u001b[90m)\u001b[39m\n"
                        }
                      ],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.225Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "X:\\a\\dialog-ai-service\\tests\\unit\\AIService.test.ts",
                        "column": 20,
                        "line": 334
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-e5bcafdb37e29aa57375",
              "file": "unit/AIService.test.ts",
              "line": 332,
              "column": 7
            },
            {
              "title": "should handle connection test failure",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 2,
                      "errors": [],
                      "stdout": [],
                      "stderr": [
                        {
                          "text": "OpenAI connection test failed: Error: Connection failed\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mtests\\unit\\AIService.test.ts:338:42\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:309:15\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:326:17\n    at TimeoutManager.withRunnable \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\timeoutManager.js:68:9\u001b[90m)\u001b[39m\n    at TestInfoImpl._runWithTimeout \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\testInfo.js:324:34\u001b[90m)\u001b[39m\n    at \u001b[90mX:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:307:22\n    at WorkerMain._runTest \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:282:5\u001b[90m)\u001b[39m\n    at WorkerMain.runTestGroup \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\worker\\workerMain.js:194:11\u001b[90m)\u001b[39m\n    at process.<anonymous> \u001b[90m(X:\\a\\dialog-ai-service\\\u001b[39mnode_modules\\\u001b[4mplaywright\u001b[24m\\lib\\common\\process.js:65:22\u001b[90m)\u001b[39m\n"
                        }
                      ],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:13.255Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-b5b13edaa172866213fd",
              "file": "unit/AIService.test.ts",
              "line": 337,
              "column": 7
            },
            {
              "title": "should format recent messages correctly",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "unit-tests",
                  "projectName": "unit-tests",
                  "results": [
                    {
                      "workerIndex": 16,
                      "parallelIndex": 3,
                      "status": "passed",
                      "duration": 34,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-22T17:32:14.698Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "ed05ca046d31b2be7c9c-4b832636fbcb099636d6",
              "file": "unit/AIService.test.ts",
              "line": 344,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "unit\\ContextCompressor.test.ts",
      "file": "unit/ContextCompressor.test.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ContextCompressor Unit Tests",
          "file": "unit/ContextCompressor.test.ts",
          "line": 6,
          "column": 6,
          "specs": [],
          "suites": [
            {
              "title": "Configuration and Initialization",
              "file": "unit/ContextCompressor.test.ts",
              "line": 20,
              "column": 8,
              "specs": [
                {
                  "title": "should initialize with provided configuration",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:15.877Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-15f33185d3e6c41e5a00",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 21,
                  "column": 9
                },
                {
                  "title": "should initialize with default configuration when none provided",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.721Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-4e689466e000314e8b44",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 25,
                  "column": 9
                },
                {
                  "title": "should use custom configuration values",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 17,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.149Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-f5124976e40a31d6cd46",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 34,
                  "column": 9
                }
              ]
            },
            {
              "title": "Basic Compression",
              "file": "unit/ContextCompressor.test.ts",
              "line": 46,
              "column": 8,
              "specs": [
                {
                  "title": "should compress simple conversation without summary for few messages",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 15,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 32,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.171Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-9238178f136f99cce3f7",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 47,
                  "column": 9
                },
                {
                  "title": "should create summary when message count exceeds threshold",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 14,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 11,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.458Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-4786bcc48b0376f413ec",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 61,
                  "column": 9
                },
                {
                  "title": "should include reference context when provided",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 16,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.793Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-eac26fade92ce09bab3c",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 72,
                  "column": 9
                },
                {
                  "title": "should limit recent messages to configured maximum",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 18,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 14,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.766Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-71fedd20e40b79d36765",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 82,
                  "column": 9
                }
              ]
            },
            {
              "title": "Key Facts Extraction",
              "file": "unit/ContextCompressor.test.ts",
              "line": 95,
              "column": 8,
              "specs": [
                {
                  "title": "should extract rejection facts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:15.910Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-bcb783d788289e39acfc",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 96,
                  "column": 9
                },
                {
                  "title": "should extract agreement facts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 11,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.809Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-fe67d76501373cf1a7e0",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 111,
                  "column": 9
                },
                {
                  "title": "should extract preference facts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:15.972Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-21edc93a0513cd1eada9",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 126,
                  "column": 9
                },
                {
                  "title": "should extract question facts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:15.989Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-014fbd2e33750438ff51",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 141,
                  "column": 9
                },
                {
                  "title": "should extract personal information facts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.013Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-4cc2befa12b6495db489",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 156,
                  "column": 9
                },
                {
                  "title": "should limit key facts to 10 items",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.026Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-40c0a4405a201fbf171e",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 173,
                  "column": 9
                },
                {
                  "title": "should deduplicate similar facts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.039Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-c1f9ed8fe7cfcf5990aa",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 185,
                  "column": 9
                }
              ]
            },
            {
              "title": "Message Compression",
              "file": "unit/ContextCompressor.test.ts",
              "line": 201,
              "column": 8,
              "specs": [
                {
                  "title": "should keep short messages unchanged",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.050Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-d777d0154f532aba9f54",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 202,
                  "column": 9
                },
                {
                  "title": "should compress greetings to markers",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 11,
                          "parallelIndex": 4,
                          "status": "failed",
                          "duration": 6,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"[Greeting exchanged]\"\u001b[39m\nReceived: \u001b[31m\"Hello, how are you today?\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"[Greeting exchanged]\"\u001b[39m\nReceived: \u001b[31m\"Hello, how are you today?\"\u001b[39m\n    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:219:28)\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:217:17",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                              "column": 28,
                              "line": 219
                            },
                            "snippet": "  217 |       greetings.forEach(greeting => {\n  218 |         const compressed = (contextCompressor as any).compressMessage(greeting);\n> 219 |         expect(compressed).toBe('[Greeting exchanged]');\n      |                            ^\n  220 |       });\n  221 |     });\n  222 |"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                                "column": 28,
                                "line": 219
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"[Greeting exchanged]\"\u001b[39m\nReceived: \u001b[31m\"Hello, how are you today?\"\u001b[39m\n\n  217 |       greetings.forEach(greeting => {\n  218 |         const compressed = (contextCompressor as any).compressMessage(greeting);\n> 219 |         expect(compressed).toBe('[Greeting exchanged]');\n      |                            ^\n  220 |       });\n  221 |     });\n  222 |\n\u001b[2m    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:219:28)\u001b[22m\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:217:17\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.064Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                            "column": 28,
                            "line": 219
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-5a9af22727f95ff305f5",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 208,
                  "column": 9
                },
                {
                  "title": "should compress farewells to markers",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 20,
                          "parallelIndex": 4,
                          "status": "failed",
                          "duration": 18,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"[Farewell message]\"\u001b[39m\nReceived: \u001b[31m\"Goodbye, talk to you later!\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"[Farewell message]\"\u001b[39m\nReceived: \u001b[31m\"Goodbye, talk to you later!\"\u001b[39m\n    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:234:28)\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:232:17",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                              "column": 28,
                              "line": 234
                            },
                            "snippet": "  232 |       farewells.forEach(farewell => {\n  233 |         const compressed = (contextCompressor as any).compressMessage(farewell);\n> 234 |         expect(compressed).toBe('[Farewell message]');\n      |                            ^\n  235 |       });\n  236 |     });\n  237 |"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                                "column": 28,
                                "line": 234
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"[Farewell message]\"\u001b[39m\nReceived: \u001b[31m\"Goodbye, talk to you later!\"\u001b[39m\n\n  232 |       farewells.forEach(farewell => {\n  233 |         const compressed = (contextCompressor as any).compressMessage(farewell);\n> 234 |         expect(compressed).toBe('[Farewell message]');\n      |                            ^\n  235 |       });\n  236 |     });\n  237 |\n\u001b[2m    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:234:28)\u001b[22m\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:232:17\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.349Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                            "column": 28,
                            "line": 234
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-30a4f928c003cf6530f9",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 223,
                  "column": 9
                },
                {
                  "title": "should compress long messages while preserving important content",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 15,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.231Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-41bce029edb157770058",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 238,
                  "column": 9
                },
                {
                  "title": "should detect and preserve important information in long messages",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 15,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.246Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-d4a6dbd02e354277f476",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 248,
                  "column": 9
                },
                {
                  "title": "should detect greeting patterns correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 15,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.258Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-15af5db4351fcd0d0435",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 259,
                  "column": 9
                },
                {
                  "title": "should detect farewell patterns correctly",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 15,
                          "parallelIndex": 5,
                          "status": "failed",
                          "duration": 5,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:298:28)\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:296:21",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                              "column": 28,
                              "line": 298
                            },
                            "snippet": "  296 |       farewellTexts.forEach(text => {\n  297 |         const isFarewell = (contextCompressor as any).isFarewell(text);\n> 298 |         expect(isFarewell).toBe(true);\n      |                            ^\n  299 |       });\n  300 |     });\n  301 |"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                                "column": 28,
                                "line": 298
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n\n  296 |       farewellTexts.forEach(text => {\n  297 |         const isFarewell = (contextCompressor as any).isFarewell(text);\n> 298 |         expect(isFarewell).toBe(true);\n      |                            ^\n  299 |       });\n  300 |     });\n  301 |\n\u001b[2m    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:298:28)\u001b[22m\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:296:21\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.275Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                            "column": 28,
                            "line": 298
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-fc797bec9889d35e4103",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 280,
                  "column": 9
                },
                {
                  "title": "should detect important information patterns",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 21,
                          "parallelIndex": 5,
                          "status": "failed",
                          "duration": 30,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:315:29)\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:313:22",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                              "column": 29,
                              "line": 315
                            },
                            "snippet": "  313 |       importantTexts.forEach(text => {\n  314 |         const isImportant = (contextCompressor as any).containsImportantInfo(text.toLowerCase());\n> 315 |         expect(isImportant).toBe(true);\n      |                             ^\n  316 |       });\n  317 |     });\n  318 |   });"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                                "column": 29,
                                "line": 315
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n\n  313 |       importantTexts.forEach(text => {\n  314 |         const isImportant = (contextCompressor as any).containsImportantInfo(text.toLowerCase());\n> 315 |         expect(isImportant).toBe(true);\n      |                             ^\n  316 |       });\n  317 |     });\n  318 |   });\n\u001b[2m    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:315:29)\u001b[22m\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:313:22\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.889Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                            "column": 29,
                            "line": 315
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-538a3b7ea77bd0dfe59c",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 302,
                  "column": 9
                }
              ]
            },
            {
              "title": "Summary Creation",
              "file": "unit/ContextCompressor.test.ts",
              "line": 320,
              "column": 8,
              "specs": [
                {
                  "title": "should create meaningful summary from conversation",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 14,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.519Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-75dd3a3a8b25f0e748fe",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 321,
                  "column": 9
                },
                {
                  "title": "should extract topics correctly",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 14,
                          "parallelIndex": 1,
                          "status": "failed",
                          "duration": 4,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m\"gaming\"\u001b[39m\nReceived array: \u001b[31m[\"coaching\", \"support\", \"subscription\", \"premium\"]\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m\"gaming\"\u001b[39m\nReceived array: \u001b[31m[\"coaching\", \"support\", \"subscription\", \"premium\"]\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:341:22",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                              "column": 22,
                              "line": 341
                            },
                            "snippet": "  339 |       const topics = (contextCompressor as any).extractTopics(messages);\n  340 |       \n> 341 |       expect(topics).toContain('gaming');\n      |                      ^\n  342 |       expect(topics).toContain('coaching');\n  343 |       expect(topics).toContain('subscription');\n  344 |       expect(topics).toContain('premium');"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                                "column": 22,
                                "line": 341
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m\"gaming\"\u001b[39m\nReceived array: \u001b[31m[\"coaching\", \"support\", \"subscription\", \"premium\"]\u001b[39m\n\n  339 |       const topics = (contextCompressor as any).extractTopics(messages);\n  340 |       \n> 341 |       expect(topics).toContain('gaming');\n      |                      ^\n  342 |       expect(topics).toContain('coaching');\n  343 |       expect(topics).toContain('subscription');\n  344 |       expect(topics).toContain('premium');\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts:341:22\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.566Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ContextCompressor.test.ts",
                            "column": 22,
                            "line": 341
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-040add4d60c764ddfe61",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 331,
                  "column": 9
                },
                {
                  "title": "should determine user stance correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 11,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.772Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-eba4780d6d2f69641ac3",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 347,
                  "column": 9
                },
                {
                  "title": "should determine receptive user stance",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.812Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-136bd4aea253504d7a34",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 358,
                  "column": 9
                },
                {
                  "title": "should assess progress correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.826Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-9201b93e35a410a7d681",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 369,
                  "column": 9
                },
                {
                  "title": "should detect mixed signals in progress",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.845Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-e0e9e6aac3c089d0970f",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 380,
                  "column": 9
                },
                {
                  "title": "should count rejection attempts in summary",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.864Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-fecc8f9439a2bc189077",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 393,
                  "column": 9
                }
              ]
            },
            {
              "title": "Recent Messages Processing",
              "file": "unit/ContextCompressor.test.ts",
              "line": 407,
              "column": 8,
              "specs": [
                {
                  "title": "should format recent messages correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 7,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.888Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-e6a0dd459f0e5508643f",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 408,
                  "column": 9
                },
                {
                  "title": "should compress individual messages in recent messages",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 5,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.911Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-3a7e3e3f9b333cda82cd",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 424,
                  "column": 9
                },
                {
                  "title": "should maintain chronological order of recent messages",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 12,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.936Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-dfe5e09811ff1ec28ca7",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 435,
                  "column": 9
                }
              ]
            },
            {
              "title": "Multi-language Support",
              "file": "unit/ContextCompressor.test.ts",
              "line": 452,
              "column": 8,
              "specs": [
                {
                  "title": "should handle multilingual conversations",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 7,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:16.974Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-0dea43ab3bd3b15e0292",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 453,
                  "column": 9
                },
                {
                  "title": "should detect Chinese rejection patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.012Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-b986f1550d32d3a4b5a5",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 463,
                  "column": 9
                },
                {
                  "title": "should detect Chinese agreement patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.028Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-52af64a50396b20c6639",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 469,
                  "column": 9
                },
                {
                  "title": "should detect Japanese patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.047Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-d1107c7bfbbfc2a6a3a9",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 475,
                  "column": 9
                },
                {
                  "title": "should detect Korean patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.074Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-742796cc3806de8cf4ea",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 483,
                  "column": 9
                },
                {
                  "title": "should detect Spanish patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.089Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-cb4ac98a2b076fa395ac",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 491,
                  "column": 9
                }
              ]
            },
            {
              "title": "Edge Cases and Error Handling",
              "file": "unit/ContextCompressor.test.ts",
              "line": 500,
              "column": 8,
              "specs": [
                {
                  "title": "should handle empty message list",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.116Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-91578a91626c11d35618",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 501,
                  "column": 9
                },
                {
                  "title": "should handle null and undefined inputs gracefully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.132Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-f5c2488bd69cb55c4e90",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 510,
                  "column": 9
                },
                {
                  "title": "should handle messages without created timestamps",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.150Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-5e40daf99543422fd38d",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 522,
                  "column": 9
                },
                {
                  "title": "should handle very long goal strings",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.171Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-a167f844a4535620c616",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 534,
                  "column": 9
                },
                {
                  "title": "should extract snippet with correct length limit",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.188Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-0b3f16caca0ca690a4ef",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 544,
                  "column": 9
                },
                {
                  "title": "should not truncate short text in extractSnippet",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 17,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.199Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "2f122a53be4f8e8055b3-c887e2f1cc02f9872643",
                  "file": "unit/ContextCompressor.test.ts",
                  "line": 552,
                  "column": 9
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "unit\\LanguageDetector.test.ts",
      "file": "unit/LanguageDetector.test.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "LanguageDetector Unit Tests",
          "file": "unit/LanguageDetector.test.ts",
          "line": 6,
          "column": 6,
          "specs": [],
          "suites": [
            {
              "title": "Single Text Detection",
              "file": "unit/LanguageDetector.test.ts",
              "line": 13,
              "column": 8,
              "specs": [
                {
                  "title": "should detect Chinese text correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.219Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-1c804bdb11d987c26411",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 14,
                  "column": 9
                },
                {
                  "title": "should detect Japanese text correctly",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 17,
                          "parallelIndex": 7,
                          "status": "failed",
                          "duration": 4,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ja\"\u001b[39m\nReceived: \u001b[31m\"zh\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ja\"\u001b[39m\nReceived: \u001b[31m\"zh\"\u001b[39m\n    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:25:24)\n    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:23:39",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                              "column": 24,
                              "line": 25
                            },
                            "snippet": "  23 |       TestData.languageTexts.japanese.forEach(text => {\n  24 |         const result = languageDetector.detect(text, 'en');\n> 25 |         expect(result).toBe('ja');\n     |                        ^\n  26 |         TestHelpers.expectValidLanguage(result);\n  27 |       });\n  28 |     });"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                                "column": 24,
                                "line": 25
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ja\"\u001b[39m\nReceived: \u001b[31m\"zh\"\u001b[39m\n\n  23 |       TestData.languageTexts.japanese.forEach(text => {\n  24 |         const result = languageDetector.detect(text, 'en');\n> 25 |         expect(result).toBe('ja');\n     |                        ^\n  26 |         TestHelpers.expectValidLanguage(result);\n  27 |       });\n  28 |     });\n\u001b[2m    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:25:24)\u001b[22m\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:23:39\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.218Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                            "column": 24,
                            "line": 25
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-8bacb6497d61054f0568",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 22,
                  "column": 9
                },
                {
                  "title": "should detect Korean text correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 9,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.956Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-acfa073ff454db8d9d39",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 30,
                  "column": 9
                },
                {
                  "title": "should detect English text correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.242Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-b7d232d6b553f218cc40",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 38,
                  "column": 9
                },
                {
                  "title": "should detect Spanish text correctly",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 10,
                          "parallelIndex": 0,
                          "status": "failed",
                          "duration": 5,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"e\u001b[7ms\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"e\u001b[7mn\u001b[27m\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"e\u001b[7ms\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"e\u001b[7mn\u001b[27m\"\u001b[39m\n    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:49:24)\n    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:47:38",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                              "column": 24,
                              "line": 49
                            },
                            "snippet": "  47 |       TestData.languageTexts.spanish.forEach(text => {\n  48 |         const result = languageDetector.detect(text, 'en');\n> 49 |         expect(result).toBe('es');\n     |                        ^\n  50 |         TestHelpers.expectValidLanguage(result);\n  51 |       });\n  52 |     });"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                                "column": 24,
                                "line": 49
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"e\u001b[7ms\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"e\u001b[7mn\u001b[27m\"\u001b[39m\n\n  47 |       TestData.languageTexts.spanish.forEach(text => {\n  48 |         const result = languageDetector.detect(text, 'en');\n> 49 |         expect(result).toBe('es');\n     |                        ^\n  50 |         TestHelpers.expectValidLanguage(result);\n  51 |       });\n  52 |     });\n\u001b[2m    at forEach (X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:49:24)\u001b[22m\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:47:38\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.256Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                            "column": 24,
                            "line": 49
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-36c4bf3009e04d43816a",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 46,
                  "column": 9
                },
                {
                  "title": "should detect Russian text correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 9,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.203Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-8f5b37022a553e42adc1",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 54,
                  "column": 9
                },
                {
                  "title": "should fall back to provided fallback language for empty text",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 16,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.847Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-1e74e2dd097347813c34",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 68,
                  "column": 9
                },
                {
                  "title": "should fall back to provided fallback language for whitespace only",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 16,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.884Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-335ee35e18252cacda6c",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 73,
                  "column": 9
                },
                {
                  "title": "should fall back to provided fallback language for unrecognized text",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 16,
                          "parallelIndex": 3,
                          "status": "failed",
                          "duration": 6,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ko\"\u001b[39m\nReceived: \u001b[31m\"en\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ko\"\u001b[39m\nReceived: \u001b[31m\"en\"\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:80:22",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                              "column": 22,
                              "line": 80
                            },
                            "snippet": "  78 |     test('should fall back to provided fallback language for unrecognized text', () => {\n  79 |       const result = languageDetector.detect('xyz123!@#', 'ko');\n> 80 |       expect(result).toBe('ko');\n     |                      ^\n  81 |     });\n  82 |\n  83 |     test('should detect mixed CJK text prioritizing first detected', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                                "column": 22,
                                "line": 80
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ko\"\u001b[39m\nReceived: \u001b[31m\"en\"\u001b[39m\n\n  78 |     test('should fall back to provided fallback language for unrecognized text', () => {\n  79 |       const result = languageDetector.detect('xyz123!@#', 'ko');\n> 80 |       expect(result).toBe('ko');\n     |                      ^\n  81 |     });\n  82 |\n  83 |     test('should detect mixed CJK text prioritizing first detected', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:80:22\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:17.903Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                            "column": 22,
                            "line": 80
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-ddddc7a16b1e751311e6",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 78,
                  "column": 9
                },
                {
                  "title": "should detect mixed CJK text prioritizing first detected",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 25,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 9,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.705Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-3e143bdcff66a56a16a8",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 83,
                  "column": 9
                },
                {
                  "title": "should detect Latin text with Spanish indicators",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 18,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 12,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.843Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-e58edaf2bf7c0405d47b",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 89,
                  "column": 9
                },
                {
                  "title": "should default to English for Latin text without Spanish indicators",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.877Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-1f3664261ed998d5d36d",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 104,
                  "column": 9
                },
                {
                  "title": "should respect fallback language for ambiguous Latin text",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 18,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.872Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-7efa724620ce5a8f9d5a",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 118,
                  "column": 9
                },
                {
                  "title": "should handle numbers and special characters",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 18,
                          "parallelIndex": 2,
                          "status": "failed",
                          "duration": 10,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"e\u001b[7ms\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"e\u001b[7mn\u001b[27m\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"e\u001b[7ms\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"e\u001b[7mn\u001b[27m\"\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:138:66",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                              "column": 66,
                              "line": 138
                            },
                            "snippet": "  136 |       expect(languageDetector.detect(textsWithNumbers[0], 'en')).toBe('zh');\n  137 |       expect(languageDetector.detect(textsWithNumbers[1], 'zh')).toBe('en');\n> 138 |       expect(languageDetector.detect(textsWithNumbers[2], 'en')).toBe('es');\n      |                                                                  ^\n  139 |       expect(languageDetector.detect(textsWithNumbers[3], 'en')).toBe('ja');\n  140 |     });\n  141 |"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                                "column": 66,
                                "line": 138
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"e\u001b[7ms\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"e\u001b[7mn\u001b[27m\"\u001b[39m\n\n  136 |       expect(languageDetector.detect(textsWithNumbers[0], 'en')).toBe('zh');\n  137 |       expect(languageDetector.detect(textsWithNumbers[1], 'zh')).toBe('en');\n> 138 |       expect(languageDetector.detect(textsWithNumbers[2], 'en')).toBe('es');\n      |                                                                  ^\n  139 |       expect(languageDetector.detect(textsWithNumbers[3], 'en')).toBe('ja');\n  140 |     });\n  141 |\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:138:66\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.896Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                            "column": 66,
                            "line": 138
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-8117813e414ec9e18bfc",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 128,
                  "column": 9
                },
                {
                  "title": "should handle emoji and unicode characters",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 16,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.898Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-e907a733857c2884a334",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 142,
                  "column": 9
                }
              ]
            },
            {
              "title": "Multiple Text Detection",
              "file": "unit/LanguageDetector.test.ts",
              "line": 159,
              "column": 8,
              "specs": [
                {
                  "title": "should detect dominant language in multiple texts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 6,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.612Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-557bcc8bb5f4c48cb368",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 160,
                  "column": 9
                },
                {
                  "title": "should fall back to primary language when texts are evenly split",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.961Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-af0a071223a49cd94562",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 173,
                  "column": 9
                },
                {
                  "title": "should handle empty array",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 26,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.874Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-c37076b145857a594408",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 185,
                  "column": 9
                },
                {
                  "title": "should handle single text in array",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.982Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-501e189a6bf89d95cff8",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 190,
                  "column": 9
                },
                {
                  "title": "should count each text independently",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:19.993Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-c2021b9dbd108644de04",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 195,
                  "column": 9
                }
              ]
            },
            {
              "title": "Language Switch Detection",
              "file": "unit/LanguageDetector.test.ts",
              "line": 209,
              "column": 8,
              "specs": [
                {
                  "title": "should detect language switch from English to Chinese",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.019Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-35b9e0a06b1dea8d9e29",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 210,
                  "column": 9
                },
                {
                  "title": "should detect language switch from Chinese to English",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.037Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-d09a7f77b2e263a91fd5",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 215,
                  "column": 9
                },
                {
                  "title": "should not detect switch when language remains the same",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.048Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-bf476ddbf32773717af4",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 220,
                  "column": 9
                },
                {
                  "title": "should not detect switch for Chinese to Chinese",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.059Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-552e849bca8c7e29fe56",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 225,
                  "column": 9
                },
                {
                  "title": "should detect switch from Japanese to Korean",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.073Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-c10de4a6c35957ec1e30",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 230,
                  "column": 9
                },
                {
                  "title": "should handle ambiguous text switches",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 19,
                          "parallelIndex": 6,
                          "status": "failed",
                          "duration": 4,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:238:24",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                              "column": 24,
                              "line": 238
                            },
                            "snippet": "  236 |       // When text is ambiguous, it should fall back to previous language\n  237 |       const isSwitch = languageDetector.isLanguageSwitch('zh', 'test 123');\n> 238 |       expect(isSwitch).toBe(false); // Falls back to 'zh', so no switch\n      |                        ^\n  239 |     });\n  240 |\n  241 |     test('should handle empty text switches', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                                "column": 24,
                                "line": 238
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n\n  236 |       // When text is ambiguous, it should fall back to previous language\n  237 |       const isSwitch = languageDetector.isLanguageSwitch('zh', 'test 123');\n> 238 |       expect(isSwitch).toBe(false); // Falls back to 'zh', so no switch\n      |                        ^\n  239 |     });\n  240 |\n  241 |     test('should handle empty text switches', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts:238:24\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.086Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\LanguageDetector.test.ts",
                            "column": 24,
                            "line": 238
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-17020806dbe1adfc2659",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 235,
                  "column": 9
                },
                {
                  "title": "should handle empty text switches",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 11,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.887Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-9277dcc034a119286031",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 241,
                  "column": 9
                }
              ]
            },
            {
              "title": "Edge Cases",
              "file": "unit/LanguageDetector.test.ts",
              "line": 247,
              "column": 8,
              "specs": [
                {
                  "title": "should handle very long texts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 29,
                          "parallelIndex": 4,
                          "status": "passed",
                          "duration": 9,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.216Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-fd8f26a2adf3bfa53121",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 248,
                  "column": 9
                },
                {
                  "title": "should handle very short texts",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.837Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-20b67166e428a7d44853",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 254,
                  "column": 9
                },
                {
                  "title": "should handle texts with only punctuation",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 5,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.858Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-8e8c55f043175d1f6d18",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 261,
                  "column": 9
                },
                {
                  "title": "should handle mixed script boundaries",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.879Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-d86eb4a54d597b8000be",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 276,
                  "column": 9
                },
                {
                  "title": "should handle null and undefined gracefully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.898Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-692e73bd4cc5d2e332a4",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 290,
                  "column": 9
                },
                {
                  "title": "should handle non-string inputs gracefully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 5,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.934Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-0dc67f179bfa767e818d",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 295,
                  "column": 9
                }
              ]
            },
            {
              "title": "Performance Tests",
              "file": "unit/LanguageDetector.test.ts",
              "line": 302,
              "column": 8,
              "specs": [
                {
                  "title": "should process multiple detections quickly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.955Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-9735900df25b29e4c305",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 303,
                  "column": 9
                },
                {
                  "title": "should handle large text detection efficiently",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:20.971Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "537b8f1d0db8f135b281-176757f489623fce879f",
                  "file": "unit/LanguageDetector.test.ts",
                  "line": 318,
                  "column": 9
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "unit\\ScoringEngine.test.ts",
      "file": "unit/ScoringEngine.test.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ScoringEngine Unit Tests",
          "file": "unit/ScoringEngine.test.ts",
          "line": 6,
          "column": 6,
          "specs": [],
          "suites": [
            {
              "title": "Configuration and Initialization",
              "file": "unit/ScoringEngine.test.ts",
              "line": 30,
              "column": 8,
              "specs": [
                {
                  "title": "should initialize with provided configuration",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.004Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-320cecdb1190b967d45e",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 31,
                  "column": 9
                },
                {
                  "title": "should initialize with empty previous scores",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.013Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-74bc7fc3b783abbedb6b",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 35,
                  "column": 9
                },
                {
                  "title": "should calculate weighted score correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.021Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-dabed9691ffe40999541",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 39,
                  "column": 9
                },
                {
                  "title": "should clamp scores to 0-1 range",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.028Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-2d6b170c3c65b43718f9",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 60,
                  "column": 9
                }
              ]
            },
            {
              "title": "User Engagement Scoring",
              "file": "unit/ScoringEngine.test.ts",
              "line": 85,
              "column": 8,
              "specs": [
                {
                  "title": "should score high engagement correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.041Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-7e3cdf08ab44051b447d",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 86,
                  "column": 9
                },
                {
                  "title": "should score low engagement correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.051Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-cef44e44476d322f4302",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 94,
                  "column": 9
                },
                {
                  "title": "should penalize one-word responses",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.088Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-f771328024f7e8035478",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 102,
                  "column": 9
                },
                {
                  "title": "should reward questions and detailed responses",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.078Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-7d6e2c480d8db5097b08",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 113,
                  "column": 9
                },
                {
                  "title": "should detect positive engagement patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.094Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-9b48ad5f51f39fac3110",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 124,
                  "column": 9
                },
                {
                  "title": "should detect negative engagement patterns",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 22,
                          "parallelIndex": 1,
                          "status": "failed",
                          "duration": 8,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeLessThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: < \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.55\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeLessThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: < \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.55\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:143:21",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 21,
                              "line": 143
                            },
                            "snippet": "  141 |       \n  142 |       const score = (scoringEngine as any).calculateUserEngagement(negativeMessages);\n> 143 |       expect(score).toBeLessThan(0.5);\n      |                     ^\n  144 |     });\n  145 |\n  146 |     test('should handle empty message list', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 21,
                                "line": 143
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeLessThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: < \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.55\u001b[39m\n\n  141 |       \n  142 |       const score = (scoringEngine as any).calculateUserEngagement(negativeMessages);\n> 143 |       expect(score).toBeLessThan(0.5);\n      |                     ^\n  144 |     });\n  145 |\n  146 |     test('should handle empty message list', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:143:21\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.108Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 21,
                            "line": 143
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-ddaa9117bf184a523ff2",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 135,
                  "column": 9
                },
                {
                  "title": "should handle empty message list",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.108Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-c6341ca236b5b38917be",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 146,
                  "column": 9
                },
                {
                  "title": "should consider message length appropriately",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.125Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-dc69b6b66731569e9df5",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 151,
                  "column": 9
                }
              ]
            },
            {
              "title": "Topic Relevance Scoring",
              "file": "unit/ScoringEngine.test.ts",
              "line": 168,
              "column": 8,
              "specs": [
                {
                  "title": "should score high relevance for on-topic conversation",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 30,
                          "parallelIndex": 1,
                          "status": "failed",
                          "duration": 14,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.325\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.325\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:180:21",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 21,
                              "line": 180
                            },
                            "snippet": "  178 |       const score = (scoringEngine as any).calculateTopicRelevance(messages, goal);\n  179 |       \n> 180 |       expect(score).toBeGreaterThan(0.5);\n      |                     ^\n  181 |     });\n  182 |\n  183 |     test('should score low relevance for off-topic conversation', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 21,
                                "line": 180
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.325\u001b[39m\n\n  178 |       const score = (scoringEngine as any).calculateTopicRelevance(messages, goal);\n  179 |       \n> 180 |       expect(score).toBeGreaterThan(0.5);\n      |                     ^\n  181 |     });\n  182 |\n  183 |     test('should score low relevance for off-topic conversation', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:180:21\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:25.545Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 21,
                            "line": 180
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-7501a0e013da4857286a",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 169,
                  "column": 9
                },
                {
                  "title": "should score low relevance for off-topic conversation",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.138Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-21f291c827a0b6a42735",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 183,
                  "column": 9
                },
                {
                  "title": "should extract keywords correctly",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 23,
                          "parallelIndex": 7,
                          "status": "failed",
                          "duration": 6,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:203:35",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 35,
                              "line": 203
                            },
                            "snippet": "  201 |       \n  202 |       // Stop words should be filtered out\n> 203 |       expect(keywords.has('and')).toBe(false);\n      |                                   ^\n  204 |       expect(keywords.has('the')).toBe(false);\n  205 |     });\n  206 |"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 35,
                                "line": 203
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n\n  201 |       \n  202 |       // Stop words should be filtered out\n> 203 |       expect(keywords.has('and')).toBe(false);\n      |                                   ^\n  204 |       expect(keywords.has('the')).toBe(false);\n  205 |     });\n  206 |\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:203:35\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.156Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 35,
                            "line": 203
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-132b26576e479fe01ee7",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 191,
                  "column": 9
                },
                {
                  "title": "should calculate keyword overlap correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 31,
                          "parallelIndex": 7,
                          "status": "passed",
                          "duration": 8,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.923Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-ae5782d1ed32879da623",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 207,
                  "column": 9
                },
                {
                  "title": "should handle empty keyword sets",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.282Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-c22a04f5018ac1aa4968",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 215,
                  "column": 9
                },
                {
                  "title": "should limit to recent messages for relevance calculation",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.304Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-42cb95f07c977bb9fb56",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 223,
                  "column": 9
                }
              ]
            },
            {
              "title": "Emotional Tone Scoring",
              "file": "unit/ScoringEngine.test.ts",
              "line": 237,
              "column": 8,
              "specs": [
                {
                  "title": "should detect positive emotions",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.322Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-f7e6f40589941e488cf6",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 238,
                  "column": 9
                },
                {
                  "title": "should detect negative emotions",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.341Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-05fa60113c7eae21230f",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 249,
                  "column": 9
                },
                {
                  "title": "should detect aggressive language",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.389Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-0c580ce5eb3b7f16bd98",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 260,
                  "column": 9
                },
                {
                  "title": "should detect frustration patterns",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.399Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-e2354bd19004d0188643",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 271,
                  "column": 9
                },
                {
                  "title": "should default to neutral for empty messages",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.413Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-bd7dc84bebf43a36425c",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 282,
                  "column": 9
                },
                {
                  "title": "should handle neutral messages appropriately",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.429Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-ef118e809353c97f2981",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 287,
                  "column": 9
                }
              ]
            },
            {
              "title": "Response Quality Scoring",
              "file": "unit/ScoringEngine.test.ts",
              "line": 299,
              "column": 8,
              "specs": [
                {
                  "title": "should evaluate assistant response quality",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 24,
                          "parallelIndex": 0,
                          "status": "failed",
                          "duration": 8,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.6\u001b[39m\nReceived:   \u001b[31m0.4999999999999999\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.6\u001b[39m\nReceived:   \u001b[31m0.4999999999999999\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:307:21",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 21,
                              "line": 307
                            },
                            "snippet": "  305 |       \n  306 |       const score = (scoringEngine as any).calculateResponseQuality(goodResponses);\n> 307 |       expect(score).toBeGreaterThan(0.6);\n      |                     ^\n  308 |     });\n  309 |\n  310 |     test('should penalize very short responses', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 21,
                                "line": 307
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.6\u001b[39m\nReceived:   \u001b[31m0.4999999999999999\u001b[39m\n\n  305 |       \n  306 |       const score = (scoringEngine as any).calculateResponseQuality(goodResponses);\n> 307 |       expect(score).toBeGreaterThan(0.6);\n      |                     ^\n  308 |     });\n  309 |\n  310 |     test('should penalize very short responses', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:307:21\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.442Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 21,
                            "line": 307
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-99ec67e82b80623a1414",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 300,
                  "column": 9
                },
                {
                  "title": "should penalize very short responses",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 32,
                          "parallelIndex": 0,
                          "status": "passed",
                          "duration": 12,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:25.775Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-f3b0d71f5c83e624f2ba",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 310,
                  "column": 9
                },
                {
                  "title": "should penalize very long responses",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 25,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.770Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-8d8a993f949782ddac16",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 321,
                  "column": 9
                },
                {
                  "title": "should detect repetitive responses",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 25,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.784Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-927a9059fa48765bd13f",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 331,
                  "column": 9
                },
                {
                  "title": "should reward personalized responses",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 25,
                          "parallelIndex": 3,
                          "status": "failed",
                          "duration": 5,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.7\u001b[39m\nReceived:   \u001b[31m0.5999999999999999\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.7\u001b[39m\nReceived:   \u001b[31m0.5999999999999999\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:349:21",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 21,
                              "line": 349
                            },
                            "snippet": "  347 |       \n  348 |       const score = (scoringEngine as any).calculateResponseQuality(personalizedResponses);\n> 349 |       expect(score).toBeGreaterThan(0.7);\n      |                     ^\n  350 |     });\n  351 |\n  352 |     test('should handle empty assistant message list', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 21,
                                "line": 349
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.7\u001b[39m\nReceived:   \u001b[31m0.5999999999999999\u001b[39m\n\n  347 |       \n  348 |       const score = (scoringEngine as any).calculateResponseQuality(personalizedResponses);\n> 349 |       expect(score).toBeGreaterThan(0.7);\n      |                     ^\n  350 |     });\n  351 |\n  352 |     test('should handle empty assistant message list', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:349:21\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:21.797Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 21,
                            "line": 349
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-92c9eb114f54defff0ff",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 342,
                  "column": 9
                },
                {
                  "title": "should handle empty assistant message list",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 33,
                          "parallelIndex": 3,
                          "status": "passed",
                          "duration": 12,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:25.528Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-e5166a368f7f173631f9",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 352,
                  "column": 9
                },
                {
                  "title": "should calculate Levenshtein distance correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.668Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-305d6f3ed04046a197e0",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 357,
                  "column": 9
                }
              ]
            },
            {
              "title": "Goal Proximity Scoring",
              "file": "unit/ScoringEngine.test.ts",
              "line": 369,
              "column": 8,
              "specs": [
                {
                  "title": "should detect user agreement keywords",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.679Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-5e749d094f209c650d0f",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 370,
                  "column": 9
                },
                {
                  "title": "should not find agreement when none exists",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.689Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-adc1d9c799df1af866e2",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 386,
                  "column": 9
                },
                {
                  "title": "should detect progress indicators",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.707Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-16291c53e1cc0a63330c",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 402,
                  "column": 9
                },
                {
                  "title": "should handle non-user-agreement criteria types",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 1,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.750Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-7575f729726d2373ca99",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 414,
                  "column": 9
                }
              ]
            },
            {
              "title": "Issue Detection",
              "file": "unit/ScoringEngine.test.ts",
              "line": 430,
              "column": 8,
              "specs": [
                {
                  "title": "should detect explicit rejection",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.761Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-71472ae4c93bafd4d8cd",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 431,
                  "column": 9
                },
                {
                  "title": "should detect aggressive responses",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 27,
                          "parallelIndex": 2,
                          "status": "failed",
                          "duration": 2,
                          "error": {
                            "message": "TypeError: Cannot read properties of undefined (reading 'severity')",
                            "stack": "TypeError: Cannot read properties of undefined (reading 'severity')\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:464:29",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 29,
                              "line": 464
                            },
                            "snippet": "  462 |       expect(aggressiveIssue).toBeDefined();\n  463 |       expect(aggressiveIssue.severity).toBe('high');\n> 464 |       expect(rejectionIssue.severity).toBe('critical'); // Aggressive rejection\n      |                             ^\n  465 |     });\n  466 |\n  467 |     test('should detect topic drift', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 29,
                                "line": 464
                              },
                              "message": "TypeError: Cannot read properties of undefined (reading 'severity')\n\n  462 |       expect(aggressiveIssue).toBeDefined();\n  463 |       expect(aggressiveIssue.severity).toBe('high');\n> 464 |       expect(rejectionIssue.severity).toBe('critical'); // Aggressive rejection\n      |                             ^\n  465 |     });\n  466 |\n  467 |     test('should detect topic drift', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:464:29\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.771Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 29,
                            "line": 464
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-da66bcbb16ce478e8ccd",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 448,
                  "column": 9
                },
                {
                  "title": "should detect topic drift",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 34,
                          "parallelIndex": 2,
                          "status": "passed",
                          "duration": 10,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:27.804Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-f79bc134b06cef45d1b1",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 467,
                  "column": 9
                },
                {
                  "title": "should detect low engagement",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 26,
                          "parallelIndex": 5,
                          "status": "failed",
                          "duration": 6,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"high\"\u001b[39m\nReceived: \u001b[31m\"medium\"\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"high\"\u001b[39m\nReceived: \u001b[31m\"medium\"\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:496:40",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 40,
                              "line": 496
                            },
                            "snippet": "  494 |       \n  495 |       expect(engagementIssue).toBeDefined();\n> 496 |       expect(engagementIssue.severity).toBe('high'); // Very low engagement\n      |                                        ^\n  497 |     });\n  498 |\n  499 |     test('should not detect issues when everything is fine', () => {"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 40,
                                "line": 496
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"high\"\u001b[39m\nReceived: \u001b[31m\"medium\"\u001b[39m\n\n  494 |       \n  495 |       expect(engagementIssue).toBeDefined();\n> 496 |       expect(engagementIssue.severity).toBe('high'); // Very low engagement\n      |                                        ^\n  497 |     });\n  498 |\n  499 |     test('should not detect issues when everything is fine', () => {\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:496:40\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.940Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 40,
                            "line": 496
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-b0cc39b4f285e4534dc0",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 483,
                  "column": 9
                },
                {
                  "title": "should not detect issues when everything is fine",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.966Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-e92daef62b655a416280",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 499,
                  "column": 9
                }
              ]
            },
            {
              "title": "Trend Determination",
              "file": "unit/ScoringEngine.test.ts",
              "line": 514,
              "column": 8,
              "specs": [
                {
                  "title": "should determine rising trend",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 35,
                          "parallelIndex": 5,
                          "status": "passed",
                          "duration": 9,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:27.814Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-664a9748b8fcf07ad3c6",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 515,
                  "column": 9
                },
                {
                  "title": "should determine declining trend",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:23.986Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-6ef2d5546c09967729c8",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 525,
                  "column": 9
                },
                {
                  "title": "should determine stable trend",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.012Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-a0114d642f0c78d9353b",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 535,
                  "column": 9
                },
                {
                  "title": "should default to stable with insufficient history",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.041Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-a2b71d7bff8790d459ff",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 545,
                  "column": 9
                }
              ]
            },
            {
              "title": "Full Dialog Evaluation",
              "file": "unit/ScoringEngine.test.ts",
              "line": 551,
              "column": 8,
              "specs": [
                {
                  "title": "should evaluate complete dialog successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 13,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.087Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-f547d603da4f58904aca",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 552,
                  "column": 9
                },
                {
                  "title": "should track previous scores correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.129Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-4ddc18650ce7c4b11721",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 570,
                  "column": 9
                },
                {
                  "title": "should limit previous scores to 5 entries",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 3,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.151Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-c0603184c2cb398da5c0",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 583,
                  "column": 9
                },
                {
                  "title": "should calculate goal progress correctly",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 2,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.170Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-a783c9ac1653ddba7c65",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 596,
                  "column": 9
                },
                {
                  "title": "should return issues when detected",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "passed",
                          "duration": 4,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.182Z",
                          "annotations": [],
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-07246041e5564768c3d4",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 606,
                  "column": 9
                },
                {
                  "title": "should not return issues when dialog is healthy",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "unit-tests",
                      "projectName": "unit-tests",
                      "results": [
                        {
                          "workerIndex": 28,
                          "parallelIndex": 6,
                          "status": "failed",
                          "duration": 6,
                          "error": {
                            "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m[{\"description\": \"Conversation has drifted significantly from the goal\", \"severity\": \"medium\", \"type\": \"topic_drift\"}]\u001b[39m",
                            "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m[{\"description\": \"Conversation has drifted significantly from the goal\", \"severity\": \"medium\", \"type\": \"topic_drift\"}]\u001b[39m\n    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:622:37",
                            "location": {
                              "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                              "column": 37,
                              "line": 622
                            },
                            "snippet": "  620 |       \n  621 |       const result = await scoringEngine.evaluateDialog(healthyMessages, goal, criteria);\n> 622 |       expect(result.issuesDetected).toBeUndefined();\n      |                                     ^\n  623 |     });\n  624 |   });\n  625 | });"
                          },
                          "errors": [
                            {
                              "location": {
                                "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                                "column": 37,
                                "line": 622
                              },
                              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m[{\"description\": \"Conversation has drifted significantly from the goal\", \"severity\": \"medium\", \"type\": \"topic_drift\"}]\u001b[39m\n\n  620 |       \n  621 |       const result = await scoringEngine.evaluateDialog(healthyMessages, goal, criteria);\n> 622 |       expect(result.issuesDetected).toBeUndefined();\n      |                                     ^\n  623 |     });\n  624 |   });\n  625 | });\n\u001b[2m    at X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts:622:37\u001b[22m"
                            }
                          ],
                          "stdout": [],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2025-08-22T17:32:24.206Z",
                          "annotations": [],
                          "attachments": [],
                          "errorLocation": {
                            "file": "X:\\a\\dialog-ai-service\\tests\\unit\\ScoringEngine.test.ts",
                            "column": 37,
                            "line": 622
                          }
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "016ab16e08c57324c06b-badbc77771d1098c1302",
                  "file": "unit/ScoringEngine.test.ts",
                  "line": 616,
                  "column": 9
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "e2e\\dialog-flow.test.ts",
      "file": "e2e/dialog-flow.test.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "End-to-End Dialog Flow Tests",
          "file": "e2e/dialog-flow.test.ts",
          "line": 8,
          "column": 6,
          "specs": [],
          "suites": [
            {
              "title": "Complete Dialog Lifecycle",
              "file": "e2e/dialog-flow.test.ts",
              "line": 42,
              "column": 8,
              "specs": [
                {
                  "title": "should handle complete English dialog flow successfully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-07af4a20d999a5252d17",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 43,
                  "column": 9
                },
                {
                  "title": "should handle Chinese dialog flow with cultural nuances",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-91901d3b1cc2e3e95b12",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 130,
                  "column": 9
                },
                {
                  "title": "should handle rejection flow gracefully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-06cee6d504db1eacfda1",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 180,
                  "column": 9
                },
                {
                  "title": "should handle aggressive user behavior",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-6725012d87eca893b310",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 221,
                  "column": 9
                },
                {
                  "title": "should handle topic drift and recovery",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-2e14ad42c6d3cc98b570",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 261,
                  "column": 9
                },
                {
                  "title": "should handle multilingual conversation switching",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-3e34267b4526d0780dbe",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 303,
                  "column": 9
                }
              ]
            },
            {
              "title": "Long Conversation Context Management",
              "file": "e2e/dialog-flow.test.ts",
              "line": 334,
              "column": 8,
              "specs": [
                {
                  "title": "should handle long conversation with context compression",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-a3c0e0a9e308157f7af4",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 335,
                  "column": 9
                },
                {
                  "title": "should maintain important facts through compression",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-65cf7d3b0ff3ffd85c88",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 398,
                  "column": 9
                }
              ]
            },
            {
              "title": "Error Recovery and Resilience",
              "file": "e2e/dialog-flow.test.ts",
              "line": 450,
              "column": 8,
              "specs": [
                {
                  "title": "should recover from temporary AI service disruptions",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-563786a06b8b8055cc23",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 451,
                  "column": 9
                },
                {
                  "title": "should handle invalid message inputs gracefully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-ec34fa17dc808ad24bab",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 479,
                  "column": 9
                },
                {
                  "title": "should handle dialog state corruption gracefully",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-a9ffdd649a3cb0a53369",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 507,
                  "column": 9
                }
              ]
            },
            {
              "title": "Performance Under Load",
              "file": "e2e/dialog-flow.test.ts",
              "line": 536,
              "column": 8,
              "specs": [
                {
                  "title": "should handle rapid message processing",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-86edc223a71d508638bd",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 537,
                  "column": 9
                },
                {
                  "title": "should maintain performance with multiple concurrent dialogs",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 30000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "e2e-tests",
                      "projectName": "e2e-tests",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "420ae8a1925dbada9ffc-ee6bf12cb01cc4cf95f0",
                  "file": "e2e/dialog-flow.test.ts",
                  "line": 570,
                  "column": 9
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-08-22T17:30:00.071Z",
    "duration": 147842.83,
    "expected": 156,
    "skipped": 13,
    "unexpected": 23,
    "flaky": 0
  }
}