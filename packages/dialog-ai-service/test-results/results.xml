<testsuites id="" name="" tests="192" failures="23" skipped="13" errors="0" time="147.84283">
<testsuite name="integration\DialogManager.test.ts" timestamp="2025-08-22T17:32:06.749Z" hostname="integration-tests" tests="34" failures="3" skipped="0" time="0.536" errors="0">
<testcase name="DialogManager Integration Tests › Dialog Creation › should create dialog successfully with valid parameters" classname="integration\DialogManager.test.ts" time="0.027">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Creation › should create dialog with minimal parameters" classname="integration\DialogManager.test.ts" time="0.054">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Creation › should create dialog with Chinese language parameters" classname="integration\DialogManager.test.ts" time="0.014">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Creation › should create dialog with complex completion criteria" classname="integration\DialogManager.test.ts" time="0.026">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Creation › should create dialog with negotiation settings" classname="integration\DialogManager.test.ts" time="0.019">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Creation › should handle database errors during dialog creation" classname="integration\DialogManager.test.ts" time="0.024">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Creation › should log dialog creation events" classname="integration\DialogManager.test.ts" time="0.025">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should process message successfully" classname="integration\DialogManager.test.ts" time="0.034">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should process Chinese message correctly" classname="integration\DialogManager.test.ts" time="0.01">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should process Japanese message correctly" classname="integration\DialogManager.test.ts" time="0.064">
<failure message="DialogManager.test.ts:185:9 should process Japanese message correctly" type="FAILURE">
<![CDATA[  [integration-tests] › integration\DialogManager.test.ts:185:9 › DialogManager Integration Tests › Message Processing › should process Japanese message correctly 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "ja"
    Received: "zh"

      200 |       expect(result.dialogId).toBe(dialogId);
      201 |       expect(result.responseMessages[0].text).toContain('ゲームコーチング');
    > 202 |       expect(result.dialogState.languageActive).toBe('ja');
          |                                                 ^
      203 |     });
      204 |
      205 |     test('should handle dialog not found error', async () => {
        at X:\a\dialog-ai-service\tests\integration\DialogManager.test.ts:202:49
]]>
</failure>
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should handle dialog not found error" classname="integration\DialogManager.test.ts" time="0.009">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should handle inactive dialog status" classname="integration\DialogManager.test.ts" time="0.003">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should calculate continuation score and detect issues" classname="integration\DialogManager.test.ts" time="0.014">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should track token usage correctly" classname="integration\DialogManager.test.ts" time="0.032">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should generate operator alerts for critical issues" classname="integration\DialogManager.test.ts" time="0.005">
<failure message="DialogManager.test.ts:292:9 should generate operator alerts for critical issues" type="FAILURE">
<![CDATA[  [integration-tests] › integration\DialogManager.test.ts:292:9 › DialogManager Integration Tests › Message Processing › should generate operator alerts for critical issues 

    Error: expect(received).toBeDefined()

    Received: undefined

      320 |       const result = await dialogManager.processMessage(messageParams);
      321 |
    > 322 |       expect(result.successAssessment.operatorAlert).toBeDefined();
          |                                                      ^
      323 |       expect(result.successAssessment.operatorAlert!.required).toBe(true);
      324 |       expect(result.successAssessment.operatorAlert!.urgency).toMatch(/^(medium|high|critical)$/);
      325 |     });
        at X:\a\dialog-ai-service\tests\integration\DialogManager.test.ts:322:54
]]>
</failure>
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should handle OpenAI API errors during message processing" classname="integration\DialogManager.test.ts" time="0.025">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
OpenAI API error: Error: OpenAI API connection failed
    at MockOpenAI.mockConnectionError [90m(X:\a\dialog-ai-service\[39mtests\mocks\mock-openai.ts:91:20[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mtests\integration\DialogManager.test.ts:330:18
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:309:15
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:326:17
    at TimeoutManager.withRunnable [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\timeoutManager.js:68:9[90m)[39m
    at TestInfoImpl._runWithTimeout [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:324:34[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:307:22
    at WorkerMain._runTest [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:282:5[90m)[39m
    at WorkerMain.runTestGroup [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:194:11[90m)[39m
    at process.<anonymous> [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\common\process.js:65:22[90m)[39m
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Message Processing › should compress context for long conversations" classname="integration\DialogManager.test.ts" time="0.008">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog State Management › should retrieve dialog state successfully" classname="integration\DialogManager.test.ts" time="0.007">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog State Management › should handle dialog not found for state retrieval" classname="integration\DialogManager.test.ts" time="0.028">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog State Management › should return correct state for dialog without messages" classname="integration\DialogManager.test.ts" time="0.005">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should pause dialog successfully" classname="integration\DialogManager.test.ts" time="0.013">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should resume dialog successfully" classname="integration\DialogManager.test.ts" time="0.006">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should complete dialog successfully" classname="integration\DialogManager.test.ts" time="0.011">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should escalate dialog successfully" classname="integration\DialogManager.test.ts" time="0.004">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should handle control operation on non-existent dialog" classname="integration\DialogManager.test.ts" time="0.007">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should log control operations" classname="integration\DialogManager.test.ts" time="0.008">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Dialog Control Operations › should handle database errors during control operations" classname="integration\DialogManager.test.ts" time="0.004">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Configuration and Setup › should load configuration from provided path" classname="integration\DialogManager.test.ts" time="0.006">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
Could not load config from ./test-config.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Configuration and Setup › should use default configuration when file not found" classname="integration\DialogManager.test.ts" time="0.005">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
Could not load config from ./non-existent-config.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Configuration and Setup › should initialize all services correctly" classname="integration\DialogManager.test.ts" time="0.011">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Configuration and Setup › should close database connection" classname="integration\DialogManager.test.ts" time="0.012">
<failure message="DialogManager.test.ts:581:9 should close database connection" type="FAILURE">
<![CDATA[  [integration-tests] › integration\DialogManager.test.ts:581:9 › DialogManager Integration Tests › Configuration and Setup › should close database connection 

    Error: expect(received).toHaveBeenCalled()

    Matcher error: received value must be a mock or spy function

    Received has type:  function
    Received has value: [Function functionStub]

      585 |       await manager.close();
      586 |       
    > 587 |       expect(mockPrisma.getMockClient().$disconnect).toHaveBeenCalled();
          |                                                      ^
      588 |     });
      589 |   });
      590 |
        at X:\a\dialog-ai-service\tests\integration\DialogManager.test.ts:587:54
]]>
</failure>
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Error Handling and Logging › should log errors during dialog creation" classname="integration\DialogManager.test.ts" time="0.005">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Error Handling and Logging › should log errors during message processing" classname="integration\DialogManager.test.ts" time="0.008">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
OpenAI API error: Error: OpenAI API connection failed
    at MockOpenAI.mockConnectionError [90m(X:\a\dialog-ai-service\[39mtests\mocks\mock-openai.ts:91:20[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mtests\integration\DialogManager.test.ts:614:18
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:309:15
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:326:17
    at TimeoutManager.withRunnable [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\timeoutManager.js:68:9[90m)[39m
    at TestInfoImpl._runWithTimeout [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:324:34[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:307:22
    at WorkerMain._runTest [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:282:5[90m)[39m
    at WorkerMain.runTestGroup [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:194:11[90m)[39m
    at process.<anonymous> [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\common\process.js:65:22[90m)[39m
]]>
</system-err>
</testcase>
<testcase name="DialogManager Integration Tests › Error Handling and Logging › should log errors during control operations" classname="integration\DialogManager.test.ts" time="0.003">
<system-err>
<![CDATA[Could not load config from ./config/test.yaml, using defaults
]]>
</system-err>
</testcase>
</testsuite>
<testsuite name="unit\AIService.test.ts" timestamp="2025-08-22T17:32:06.749Z" hostname="unit-tests" tests="16" failures="2" skipped="0" time="0.209" errors="0">
<testcase name="AIService Unit Tests › should initialize with default configuration" classname="unit\AIService.test.ts" time="0.041">
</testcase>
<testcase name="AIService Unit Tests › should initialize with custom configuration" classname="unit\AIService.test.ts" time="0.019">
</testcase>
<testcase name="AIService Unit Tests › should generate response for English conversation" classname="unit\AIService.test.ts" time="0.03">
<failure message="AIService.test.ts:45:7 should generate response for English conversation" type="FAILURE">
<![CDATA[  [unit-tests] › unit\AIService.test.ts:45:7 › AIService Unit Tests › should generate response for English conversation 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "string"
    Received: "undefined"

      65 |     expect(result.text).toBe('Hello! I can help you with our gaming service.');
      66 |     expect(result.tokensUsed).toBe(150);
    > 67 |     expect(typeof result.strategy).toBe('string');
         |                                    ^
      68 |   });
      69 |
      70 |   test('should generate response for Chinese conversation', async () => {
        at X:\a\dialog-ai-service\tests\unit\AIService.test.ts:67:36
]]>
</failure>
</testcase>
<testcase name="AIService Unit Tests › should generate response for Chinese conversation" classname="unit\AIService.test.ts" time="0.012">
</testcase>
<testcase name="AIService Unit Tests › should generate response for Japanese conversation" classname="unit\AIService.test.ts" time="0.017">
</testcase>
<testcase name="AIService Unit Tests › should handle completion criteria for user agreement" classname="unit\AIService.test.ts" time="0.014">
</testcase>
<testcase name="AIService Unit Tests › should handle completion criteria for link requirement" classname="unit\AIService.test.ts" time="0.007">
</testcase>
<testcase name="AIService Unit Tests › should include user information in system prompt" classname="unit\AIService.test.ts" time="0.003">
</testcase>
<testcase name="AIService Unit Tests › should include reference context when provided" classname="unit\AIService.test.ts" time="0.008">
</testcase>
<testcase name="AIService Unit Tests › should calculate appropriate max tokens" classname="unit\AIService.test.ts" time="0.003">
</testcase>
<testcase name="AIService Unit Tests › should extract strategy from response" classname="unit\AIService.test.ts" time="0.002">
</testcase>
<testcase name="AIService Unit Tests › should clean internal markers from response" classname="unit\AIService.test.ts" time="0.003">
</testcase>
<testcase name="AIService Unit Tests › should handle OpenAI API errors gracefully" classname="unit\AIService.test.ts" time="0.006">
<system-err>
<![CDATA[OpenAI API error: Error: OpenAI API connection failed
    at MockOpenAI.mockConnectionError [90m(X:\a\dialog-ai-service\[39mtests\mocks\mock-openai.ts:91:20[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mtests\unit\AIService.test.ts:312:16
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:309:15
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:326:17
    at TimeoutManager.withRunnable [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\timeoutManager.js:68:9[90m)[39m
    at TestInfoImpl._runWithTimeout [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:324:34[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:307:22
    at WorkerMain._runTest [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:282:5[90m)[39m
    at WorkerMain.runTestGroup [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:194:11[90m)[39m
    at process.<anonymous> [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\common\process.js:65:22[90m)[39m
]]>
</system-err>
</testcase>
<testcase name="AIService Unit Tests › should test connection successfully" classname="unit\AIService.test.ts" time="0.008">
<failure message="AIService.test.ts:332:7 should test connection successfully" type="FAILURE">
<![CDATA[  [unit-tests] › unit\AIService.test.ts:332:7 › AIService Unit Tests › should test connection successfully 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      332 |   test('should test connection successfully', async () => {
      333 |     const result = await aiService.testConnection();
    > 334 |     expect(result).toBe(true);
          |                    ^
      335 |   });
      336 |
      337 |   test('should handle connection test failure', async () => {
        at X:\a\dialog-ai-service\tests\unit\AIService.test.ts:334:20
]]>
</failure>
<system-err>
<![CDATA[OpenAI connection test failed: TypeError: Cannot read properties of undefined (reading 'data')
    at AIService.testConnection [90m(X:\a\dialog-ai-service\[39msrc\services\AIService.ts:169:23[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mtests\unit\AIService.test.ts:333:20
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:309:9
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:326:11
    at TimeoutManager.withRunnable [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\timeoutManager.js:67:14[90m)[39m
    at TestInfoImpl._runWithTimeout [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:324:7[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:307:7
    at WorkerMain._runTest [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:282:5[90m)[39m
    at WorkerMain.runTestGroup [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:194:11[90m)[39m
    at process.<anonymous> [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\common\process.js:65:22[90m)[39m
]]>
</system-err>
</testcase>
<testcase name="AIService Unit Tests › should handle connection test failure" classname="unit\AIService.test.ts" time="0.002">
<system-err>
<![CDATA[OpenAI connection test failed: Error: Connection failed
    at [90mX:\a\dialog-ai-service\[39mtests\unit\AIService.test.ts:338:42
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:309:15
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:326:17
    at TimeoutManager.withRunnable [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\timeoutManager.js:68:9[90m)[39m
    at TestInfoImpl._runWithTimeout [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\testInfo.js:324:34[90m)[39m
    at [90mX:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:307:22
    at WorkerMain._runTest [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:282:5[90m)[39m
    at WorkerMain.runTestGroup [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\worker\workerMain.js:194:11[90m)[39m
    at process.<anonymous> [90m(X:\a\dialog-ai-service\[39mnode_modules\[4mplaywright[24m\lib\common\process.js:65:22[90m)[39m
]]>
</system-err>
</testcase>
<testcase name="AIService Unit Tests › should format recent messages correctly" classname="unit\AIService.test.ts" time="0.034">
</testcase>
</testsuite>
<testsuite name="unit\ContextCompressor.test.ts" timestamp="2025-08-22T17:32:06.749Z" hostname="unit-tests" tests="44" failures="5" skipped="0" time="0.272" errors="0">
<testcase name="ContextCompressor Unit Tests › Configuration and Initialization › should initialize with provided configuration" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Configuration and Initialization › should initialize with default configuration when none provided" classname="unit\ContextCompressor.test.ts" time="0.006">
</testcase>
<testcase name="ContextCompressor Unit Tests › Configuration and Initialization › should use custom configuration values" classname="unit\ContextCompressor.test.ts" time="0.008">
</testcase>
<testcase name="ContextCompressor Unit Tests › Basic Compression › should compress simple conversation without summary for few messages" classname="unit\ContextCompressor.test.ts" time="0.032">
</testcase>
<testcase name="ContextCompressor Unit Tests › Basic Compression › should create summary when message count exceeds threshold" classname="unit\ContextCompressor.test.ts" time="0.011">
</testcase>
<testcase name="ContextCompressor Unit Tests › Basic Compression › should include reference context when provided" classname="unit\ContextCompressor.test.ts" time="0.006">
</testcase>
<testcase name="ContextCompressor Unit Tests › Basic Compression › should limit recent messages to configured maximum" classname="unit\ContextCompressor.test.ts" time="0.014">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should extract rejection facts" classname="unit\ContextCompressor.test.ts" time="0.006">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should extract agreement facts" classname="unit\ContextCompressor.test.ts" time="0.011">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should extract preference facts" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should extract question facts" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should extract personal information facts" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should limit key facts to 10 items" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Key Facts Extraction › should deduplicate similar facts" classname="unit\ContextCompressor.test.ts" time="0.001">
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should keep short messages unchanged" classname="unit\ContextCompressor.test.ts" time="0.001">
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should compress greetings to markers" classname="unit\ContextCompressor.test.ts" time="0.006">
<failure message="ContextCompressor.test.ts:208:9 should compress greetings to markers" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ContextCompressor.test.ts:208:9 › ContextCompressor Unit Tests › Message Compression › should compress greetings to markers 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "[Greeting exchanged]"
    Received: "Hello, how are you today?"

      217 |       greetings.forEach(greeting => {
      218 |         const compressed = (contextCompressor as any).compressMessage(greeting);
    > 219 |         expect(compressed).toBe('[Greeting exchanged]');
          |                            ^
      220 |       });
      221 |     });
      222 |
        at forEach (X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:219:28)
        at X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:217:17
]]>
</failure>
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should compress farewells to markers" classname="unit\ContextCompressor.test.ts" time="0.018">
<failure message="ContextCompressor.test.ts:223:9 should compress farewells to markers" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ContextCompressor.test.ts:223:9 › ContextCompressor Unit Tests › Message Compression › should compress farewells to markers 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "[Farewell message]"
    Received: "Goodbye, talk to you later!"

      232 |       farewells.forEach(farewell => {
      233 |         const compressed = (contextCompressor as any).compressMessage(farewell);
    > 234 |         expect(compressed).toBe('[Farewell message]');
          |                            ^
      235 |       });
      236 |     });
      237 |
        at forEach (X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:234:28)
        at X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:232:17
]]>
</failure>
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should compress long messages while preserving important content" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should detect and preserve important information in long messages" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should detect greeting patterns correctly" classname="unit\ContextCompressor.test.ts" time="0.006">
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should detect farewell patterns correctly" classname="unit\ContextCompressor.test.ts" time="0.005">
<failure message="ContextCompressor.test.ts:280:9 should detect farewell patterns correctly" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ContextCompressor.test.ts:280:9 › ContextCompressor Unit Tests › Message Compression › should detect farewell patterns correctly 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      296 |       farewellTexts.forEach(text => {
      297 |         const isFarewell = (contextCompressor as any).isFarewell(text);
    > 298 |         expect(isFarewell).toBe(true);
          |                            ^
      299 |       });
      300 |     });
      301 |
        at forEach (X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:298:28)
        at X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:296:21
]]>
</failure>
</testcase>
<testcase name="ContextCompressor Unit Tests › Message Compression › should detect important information patterns" classname="unit\ContextCompressor.test.ts" time="0.03">
<failure message="ContextCompressor.test.ts:302:9 should detect important information patterns" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ContextCompressor.test.ts:302:9 › ContextCompressor Unit Tests › Message Compression › should detect important information patterns 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      313 |       importantTexts.forEach(text => {
      314 |         const isImportant = (contextCompressor as any).containsImportantInfo(text.toLowerCase());
    > 315 |         expect(isImportant).toBe(true);
          |                             ^
      316 |       });
      317 |     });
      318 |   });
        at forEach (X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:315:29)
        at X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:313:22
]]>
</failure>
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should create meaningful summary from conversation" classname="unit\ContextCompressor.test.ts" time="0.006">
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should extract topics correctly" classname="unit\ContextCompressor.test.ts" time="0.004">
<failure message="ContextCompressor.test.ts:331:9 should extract topics correctly" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ContextCompressor.test.ts:331:9 › ContextCompressor Unit Tests › Summary Creation › should extract topics correctly 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: "gaming"
    Received array: ["coaching", "support", "subscription", "premium"]

      339 |       const topics = (contextCompressor as any).extractTopics(messages);
      340 |       
    > 341 |       expect(topics).toContain('gaming');
          |                      ^
      342 |       expect(topics).toContain('coaching');
      343 |       expect(topics).toContain('subscription');
      344 |       expect(topics).toContain('premium');
        at X:\a\dialog-ai-service\tests\unit\ContextCompressor.test.ts:341:22
]]>
</failure>
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should determine user stance correctly" classname="unit\ContextCompressor.test.ts" time="0.011">
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should determine receptive user stance" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should assess progress correctly" classname="unit\ContextCompressor.test.ts" time="0.004">
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should detect mixed signals in progress" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Summary Creation › should count rejection attempts in summary" classname="unit\ContextCompressor.test.ts" time="0.006">
</testcase>
<testcase name="ContextCompressor Unit Tests › Recent Messages Processing › should format recent messages correctly" classname="unit\ContextCompressor.test.ts" time="0.007">
</testcase>
<testcase name="ContextCompressor Unit Tests › Recent Messages Processing › should compress individual messages in recent messages" classname="unit\ContextCompressor.test.ts" time="0.005">
</testcase>
<testcase name="ContextCompressor Unit Tests › Recent Messages Processing › should maintain chronological order of recent messages" classname="unit\ContextCompressor.test.ts" time="0.012">
</testcase>
<testcase name="ContextCompressor Unit Tests › Multi-language Support › should handle multilingual conversations" classname="unit\ContextCompressor.test.ts" time="0.007">
</testcase>
<testcase name="ContextCompressor Unit Tests › Multi-language Support › should detect Chinese rejection patterns" classname="unit\ContextCompressor.test.ts" time="0.001">
</testcase>
<testcase name="ContextCompressor Unit Tests › Multi-language Support › should detect Chinese agreement patterns" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Multi-language Support › should detect Japanese patterns" classname="unit\ContextCompressor.test.ts" time="0.004">
</testcase>
<testcase name="ContextCompressor Unit Tests › Multi-language Support › should detect Korean patterns" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Multi-language Support › should detect Spanish patterns" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
<testcase name="ContextCompressor Unit Tests › Edge Cases and Error Handling › should handle empty message list" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Edge Cases and Error Handling › should handle null and undefined inputs gracefully" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Edge Cases and Error Handling › should handle messages without created timestamps" classname="unit\ContextCompressor.test.ts" time="0.003">
</testcase>
<testcase name="ContextCompressor Unit Tests › Edge Cases and Error Handling › should handle very long goal strings" classname="unit\ContextCompressor.test.ts" time="0.004">
</testcase>
<testcase name="ContextCompressor Unit Tests › Edge Cases and Error Handling › should extract snippet with correct length limit" classname="unit\ContextCompressor.test.ts" time="0.001">
</testcase>
<testcase name="ContextCompressor Unit Tests › Edge Cases and Error Handling › should not truncate short text in extractSnippet" classname="unit\ContextCompressor.test.ts" time="0.002">
</testcase>
</testsuite>
<testsuite name="unit\LanguageDetector.test.ts" timestamp="2025-08-22T17:32:06.749Z" hostname="unit-tests" tests="35" failures="5" skipped="0" time="0.181" errors="0">
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect Chinese text correctly" classname="unit\LanguageDetector.test.ts" time="0.003">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect Japanese text correctly" classname="unit\LanguageDetector.test.ts" time="0.004">
<failure message="LanguageDetector.test.ts:22:9 should detect Japanese text correctly" type="FAILURE">
<![CDATA[  [unit-tests] › unit\LanguageDetector.test.ts:22:9 › LanguageDetector Unit Tests › Single Text Detection › should detect Japanese text correctly 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "ja"
    Received: "zh"

      23 |       TestData.languageTexts.japanese.forEach(text => {
      24 |         const result = languageDetector.detect(text, 'en');
    > 25 |         expect(result).toBe('ja');
         |                        ^
      26 |         TestHelpers.expectValidLanguage(result);
      27 |       });
      28 |     });
        at forEach (X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:25:24)
        at X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:23:39
]]>
</failure>
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect Korean text correctly" classname="unit\LanguageDetector.test.ts" time="0.009">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect English text correctly" classname="unit\LanguageDetector.test.ts" time="0.003">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect Spanish text correctly" classname="unit\LanguageDetector.test.ts" time="0.005">
<failure message="LanguageDetector.test.ts:46:9 should detect Spanish text correctly" type="FAILURE">
<![CDATA[  [unit-tests] › unit\LanguageDetector.test.ts:46:9 › LanguageDetector Unit Tests › Single Text Detection › should detect Spanish text correctly 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "es"
    Received: "en"

      47 |       TestData.languageTexts.spanish.forEach(text => {
      48 |         const result = languageDetector.detect(text, 'en');
    > 49 |         expect(result).toBe('es');
         |                        ^
      50 |         TestHelpers.expectValidLanguage(result);
      51 |       });
      52 |     });
        at forEach (X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:49:24)
        at X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:47:38
]]>
</failure>
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect Russian text correctly" classname="unit\LanguageDetector.test.ts" time="0.009">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should fall back to provided fallback language for empty text" classname="unit\LanguageDetector.test.ts" time="0.004">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should fall back to provided fallback language for whitespace only" classname="unit\LanguageDetector.test.ts" time="0.002">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should fall back to provided fallback language for unrecognized text" classname="unit\LanguageDetector.test.ts" time="0.006">
<failure message="LanguageDetector.test.ts:78:9 should fall back to provided fallback language for unrecognized text" type="FAILURE">
<![CDATA[  [unit-tests] › unit\LanguageDetector.test.ts:78:9 › LanguageDetector Unit Tests › Single Text Detection › should fall back to provided fallback language for unrecognized text 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "ko"
    Received: "en"

      78 |     test('should fall back to provided fallback language for unrecognized text', () => {
      79 |       const result = languageDetector.detect('xyz123!@#', 'ko');
    > 80 |       expect(result).toBe('ko');
         |                      ^
      81 |     });
      82 |
      83 |     test('should detect mixed CJK text prioritizing first detected', () => {
        at X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:80:22
]]>
</failure>
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect mixed CJK text prioritizing first detected" classname="unit\LanguageDetector.test.ts" time="0.009">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should detect Latin text with Spanish indicators" classname="unit\LanguageDetector.test.ts" time="0.012">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should default to English for Latin text without Spanish indicators" classname="unit\LanguageDetector.test.ts" time="0.006">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should respect fallback language for ambiguous Latin text" classname="unit\LanguageDetector.test.ts" time="0.003">
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should handle numbers and special characters" classname="unit\LanguageDetector.test.ts" time="0.01">
<failure message="LanguageDetector.test.ts:128:9 should handle numbers and special characters" type="FAILURE">
<![CDATA[  [unit-tests] › unit\LanguageDetector.test.ts:128:9 › LanguageDetector Unit Tests › Single Text Detection › should handle numbers and special characters 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "es"
    Received: "en"

      136 |       expect(languageDetector.detect(textsWithNumbers[0], 'en')).toBe('zh');
      137 |       expect(languageDetector.detect(textsWithNumbers[1], 'zh')).toBe('en');
    > 138 |       expect(languageDetector.detect(textsWithNumbers[2], 'en')).toBe('es');
          |                                                                  ^
      139 |       expect(languageDetector.detect(textsWithNumbers[3], 'en')).toBe('ja');
      140 |     });
      141 |
        at X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:138:66
]]>
</failure>
</testcase>
<testcase name="LanguageDetector Unit Tests › Single Text Detection › should handle emoji and unicode characters" classname="unit\LanguageDetector.test.ts" time="0.016">
</testcase>
<testcase name="LanguageDetector Unit Tests › Multiple Text Detection › should detect dominant language in multiple texts" classname="unit\LanguageDetector.test.ts" time="0.006">
</testcase>
<testcase name="LanguageDetector Unit Tests › Multiple Text Detection › should fall back to primary language when texts are evenly split" classname="unit\LanguageDetector.test.ts" time="0.002">
</testcase>
<testcase name="LanguageDetector Unit Tests › Multiple Text Detection › should handle empty array" classname="unit\LanguageDetector.test.ts" time="0.008">
</testcase>
<testcase name="LanguageDetector Unit Tests › Multiple Text Detection › should handle single text in array" classname="unit\LanguageDetector.test.ts" time="0.001">
</testcase>
<testcase name="LanguageDetector Unit Tests › Multiple Text Detection › should count each text independently" classname="unit\LanguageDetector.test.ts" time="0.001">
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should detect language switch from English to Chinese" classname="unit\LanguageDetector.test.ts" time="0.001">
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should detect language switch from Chinese to English" classname="unit\LanguageDetector.test.ts" time="0.001">
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should not detect switch when language remains the same" classname="unit\LanguageDetector.test.ts" time="0.001">
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should not detect switch for Chinese to Chinese" classname="unit\LanguageDetector.test.ts" time="0.002">
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should detect switch from Japanese to Korean" classname="unit\LanguageDetector.test.ts" time="0.001">
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should handle ambiguous text switches" classname="unit\LanguageDetector.test.ts" time="0.004">
<failure message="LanguageDetector.test.ts:235:9 should handle ambiguous text switches" type="FAILURE">
<![CDATA[  [unit-tests] › unit\LanguageDetector.test.ts:235:9 › LanguageDetector Unit Tests › Language Switch Detection › should handle ambiguous text switches 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      236 |       // When text is ambiguous, it should fall back to previous language
      237 |       const isSwitch = languageDetector.isLanguageSwitch('zh', 'test 123');
    > 238 |       expect(isSwitch).toBe(false); // Falls back to 'zh', so no switch
          |                        ^
      239 |     });
      240 |
      241 |     test('should handle empty text switches', () => {
        at X:\a\dialog-ai-service\tests\unit\LanguageDetector.test.ts:238:24
]]>
</failure>
</testcase>
<testcase name="LanguageDetector Unit Tests › Language Switch Detection › should handle empty text switches" classname="unit\LanguageDetector.test.ts" time="0.011">
</testcase>
<testcase name="LanguageDetector Unit Tests › Edge Cases › should handle very long texts" classname="unit\LanguageDetector.test.ts" time="0.009">
</testcase>
<testcase name="LanguageDetector Unit Tests › Edge Cases › should handle very short texts" classname="unit\LanguageDetector.test.ts" time="0.004">
</testcase>
<testcase name="LanguageDetector Unit Tests › Edge Cases › should handle texts with only punctuation" classname="unit\LanguageDetector.test.ts" time="0.005">
</testcase>
<testcase name="LanguageDetector Unit Tests › Edge Cases › should handle mixed script boundaries" classname="unit\LanguageDetector.test.ts" time="0.003">
</testcase>
<testcase name="LanguageDetector Unit Tests › Edge Cases › should handle null and undefined gracefully" classname="unit\LanguageDetector.test.ts" time="0.008">
</testcase>
<testcase name="LanguageDetector Unit Tests › Edge Cases › should handle non-string inputs gracefully" classname="unit\LanguageDetector.test.ts" time="0.005">
</testcase>
<testcase name="LanguageDetector Unit Tests › Performance Tests › should process multiple detections quickly" classname="unit\LanguageDetector.test.ts" time="0.004">
</testcase>
<testcase name="LanguageDetector Unit Tests › Performance Tests › should handle large text detection efficiently" classname="unit\LanguageDetector.test.ts" time="0.003">
</testcase>
</testsuite>
<testsuite name="unit\ScoringEngine.test.ts" timestamp="2025-08-22T17:32:06.749Z" hostname="unit-tests" tests="50" failures="8" skipped="0" time="0.193" errors="0">
<testcase name="ScoringEngine Unit Tests › Configuration and Initialization › should initialize with provided configuration" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Configuration and Initialization › should initialize with empty previous scores" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Configuration and Initialization › should calculate weighted score correctly" classname="unit\ScoringEngine.test.ts" time="0.003">
</testcase>
<testcase name="ScoringEngine Unit Tests › Configuration and Initialization › should clamp scores to 0-1 range" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should score high engagement correctly" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should score low engagement correctly" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should penalize one-word responses" classname="unit\ScoringEngine.test.ts" time="0.003">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should reward questions and detailed responses" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should detect positive engagement patterns" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should detect negative engagement patterns" classname="unit\ScoringEngine.test.ts" time="0.008">
<failure message="ScoringEngine.test.ts:135:9 should detect negative engagement patterns" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:135:9 › ScoringEngine Unit Tests › User Engagement Scoring › should detect negative engagement patterns 

    Error: expect(received).toBeLessThan(expected)

    Expected: < 0.5
    Received:   0.55

      141 |       
      142 |       const score = (scoringEngine as any).calculateUserEngagement(negativeMessages);
    > 143 |       expect(score).toBeLessThan(0.5);
          |                     ^
      144 |     });
      145 |
      146 |     test('should handle empty message list', () => {
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:143:21
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should handle empty message list" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › User Engagement Scoring › should consider message length appropriately" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Topic Relevance Scoring › should score high relevance for on-topic conversation" classname="unit\ScoringEngine.test.ts" time="0.014">
<failure message="ScoringEngine.test.ts:169:9 should score high relevance for on-topic conversation" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:169:9 › ScoringEngine Unit Tests › Topic Relevance Scoring › should score high relevance for on-topic conversation 

    Error: expect(received).toBeGreaterThan(expected)

    Expected: > 0.5
    Received:   0.325

      178 |       const score = (scoringEngine as any).calculateTopicRelevance(messages, goal);
      179 |       
    > 180 |       expect(score).toBeGreaterThan(0.5);
          |                     ^
      181 |     });
      182 |
      183 |     test('should score low relevance for off-topic conversation', () => {
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:180:21
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › Topic Relevance Scoring › should score low relevance for off-topic conversation" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Topic Relevance Scoring › should extract keywords correctly" classname="unit\ScoringEngine.test.ts" time="0.006">
<failure message="ScoringEngine.test.ts:191:9 should extract keywords correctly" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:191:9 › ScoringEngine Unit Tests › Topic Relevance Scoring › should extract keywords correctly 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      201 |       
      202 |       // Stop words should be filtered out
    > 203 |       expect(keywords.has('and')).toBe(false);
          |                                   ^
      204 |       expect(keywords.has('the')).toBe(false);
      205 |     });
      206 |
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:203:35
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › Topic Relevance Scoring › should calculate keyword overlap correctly" classname="unit\ScoringEngine.test.ts" time="0.008">
</testcase>
<testcase name="ScoringEngine Unit Tests › Topic Relevance Scoring › should handle empty keyword sets" classname="unit\ScoringEngine.test.ts" time="0.004">
</testcase>
<testcase name="ScoringEngine Unit Tests › Topic Relevance Scoring › should limit to recent messages for relevance calculation" classname="unit\ScoringEngine.test.ts" time="0.003">
</testcase>
<testcase name="ScoringEngine Unit Tests › Emotional Tone Scoring › should detect positive emotions" classname="unit\ScoringEngine.test.ts" time="0.003">
</testcase>
<testcase name="ScoringEngine Unit Tests › Emotional Tone Scoring › should detect negative emotions" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Emotional Tone Scoring › should detect aggressive language" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Emotional Tone Scoring › should detect frustration patterns" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Emotional Tone Scoring › should default to neutral for empty messages" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Emotional Tone Scoring › should handle neutral messages appropriately" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should evaluate assistant response quality" classname="unit\ScoringEngine.test.ts" time="0.008">
<failure message="ScoringEngine.test.ts:300:9 should evaluate assistant response quality" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:300:9 › ScoringEngine Unit Tests › Response Quality Scoring › should evaluate assistant response quality 

    Error: expect(received).toBeGreaterThan(expected)

    Expected: > 0.6
    Received:   0.4999999999999999

      305 |       
      306 |       const score = (scoringEngine as any).calculateResponseQuality(goodResponses);
    > 307 |       expect(score).toBeGreaterThan(0.6);
          |                     ^
      308 |     });
      309 |
      310 |     test('should penalize very short responses', () => {
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:307:21
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should penalize very short responses" classname="unit\ScoringEngine.test.ts" time="0.012">
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should penalize very long responses" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should detect repetitive responses" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should reward personalized responses" classname="unit\ScoringEngine.test.ts" time="0.005">
<failure message="ScoringEngine.test.ts:342:9 should reward personalized responses" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:342:9 › ScoringEngine Unit Tests › Response Quality Scoring › should reward personalized responses 

    Error: expect(received).toBeGreaterThan(expected)

    Expected: > 0.7
    Received:   0.5999999999999999

      347 |       
      348 |       const score = (scoringEngine as any).calculateResponseQuality(personalizedResponses);
    > 349 |       expect(score).toBeGreaterThan(0.7);
          |                     ^
      350 |     });
      351 |
      352 |     test('should handle empty assistant message list', () => {
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:349:21
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should handle empty assistant message list" classname="unit\ScoringEngine.test.ts" time="0.012">
</testcase>
<testcase name="ScoringEngine Unit Tests › Response Quality Scoring › should calculate Levenshtein distance correctly" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Goal Proximity Scoring › should detect user agreement keywords" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Goal Proximity Scoring › should not find agreement when none exists" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Goal Proximity Scoring › should detect progress indicators" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Goal Proximity Scoring › should handle non-user-agreement criteria types" classname="unit\ScoringEngine.test.ts" time="0.001">
</testcase>
<testcase name="ScoringEngine Unit Tests › Issue Detection › should detect explicit rejection" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Issue Detection › should detect aggressive responses" classname="unit\ScoringEngine.test.ts" time="0.002">
<failure message="ScoringEngine.test.ts:448:9 should detect aggressive responses" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:448:9 › ScoringEngine Unit Tests › Issue Detection › should detect aggressive responses 

    TypeError: Cannot read properties of undefined (reading 'severity')

      462 |       expect(aggressiveIssue).toBeDefined();
      463 |       expect(aggressiveIssue.severity).toBe('high');
    > 464 |       expect(rejectionIssue.severity).toBe('critical'); // Aggressive rejection
          |                             ^
      465 |     });
      466 |
      467 |     test('should detect topic drift', () => {
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:464:29
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › Issue Detection › should detect topic drift" classname="unit\ScoringEngine.test.ts" time="0.01">
</testcase>
<testcase name="ScoringEngine Unit Tests › Issue Detection › should detect low engagement" classname="unit\ScoringEngine.test.ts" time="0.006">
<failure message="ScoringEngine.test.ts:483:9 should detect low engagement" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:483:9 › ScoringEngine Unit Tests › Issue Detection › should detect low engagement 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "high"
    Received: "medium"

      494 |       
      495 |       expect(engagementIssue).toBeDefined();
    > 496 |       expect(engagementIssue.severity).toBe('high'); // Very low engagement
          |                                        ^
      497 |     });
      498 |
      499 |     test('should not detect issues when everything is fine', () => {
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:496:40
]]>
</failure>
</testcase>
<testcase name="ScoringEngine Unit Tests › Issue Detection › should not detect issues when everything is fine" classname="unit\ScoringEngine.test.ts" time="0.004">
</testcase>
<testcase name="ScoringEngine Unit Tests › Trend Determination › should determine rising trend" classname="unit\ScoringEngine.test.ts" time="0.009">
</testcase>
<testcase name="ScoringEngine Unit Tests › Trend Determination › should determine declining trend" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Trend Determination › should determine stable trend" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Trend Determination › should default to stable with insufficient history" classname="unit\ScoringEngine.test.ts" time="0.003">
</testcase>
<testcase name="ScoringEngine Unit Tests › Full Dialog Evaluation › should evaluate complete dialog successfully" classname="unit\ScoringEngine.test.ts" time="0.013">
</testcase>
<testcase name="ScoringEngine Unit Tests › Full Dialog Evaluation › should track previous scores correctly" classname="unit\ScoringEngine.test.ts" time="0.004">
</testcase>
<testcase name="ScoringEngine Unit Tests › Full Dialog Evaluation › should limit previous scores to 5 entries" classname="unit\ScoringEngine.test.ts" time="0.003">
</testcase>
<testcase name="ScoringEngine Unit Tests › Full Dialog Evaluation › should calculate goal progress correctly" classname="unit\ScoringEngine.test.ts" time="0.002">
</testcase>
<testcase name="ScoringEngine Unit Tests › Full Dialog Evaluation › should return issues when detected" classname="unit\ScoringEngine.test.ts" time="0.004">
</testcase>
<testcase name="ScoringEngine Unit Tests › Full Dialog Evaluation › should not return issues when dialog is healthy" classname="unit\ScoringEngine.test.ts" time="0.006">
<failure message="ScoringEngine.test.ts:616:9 should not return issues when dialog is healthy" type="FAILURE">
<![CDATA[  [unit-tests] › unit\ScoringEngine.test.ts:616:9 › ScoringEngine Unit Tests › Full Dialog Evaluation › should not return issues when dialog is healthy 

    Error: expect(received).toBeUndefined()

    Received: [{"description": "Conversation has drifted significantly from the goal", "severity": "medium", "type": "topic_drift"}]

      620 |       
      621 |       const result = await scoringEngine.evaluateDialog(healthyMessages, goal, criteria);
    > 622 |       expect(result.issuesDetected).toBeUndefined();
          |                                     ^
      623 |     });
      624 |   });
      625 | });
        at X:\a\dialog-ai-service\tests\unit\ScoringEngine.test.ts:622:37
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="e2e\dialog-flow.test.ts" timestamp="2025-08-22T17:32:06.749Z" hostname="e2e-tests" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="End-to-End Dialog Flow Tests › Complete Dialog Lifecycle › should handle complete English dialog flow successfully" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Complete Dialog Lifecycle › should handle Chinese dialog flow with cultural nuances" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Complete Dialog Lifecycle › should handle rejection flow gracefully" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Complete Dialog Lifecycle › should handle aggressive user behavior" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Complete Dialog Lifecycle › should handle topic drift and recovery" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Complete Dialog Lifecycle › should handle multilingual conversation switching" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Long Conversation Context Management › should handle long conversation with context compression" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Long Conversation Context Management › should maintain important facts through compression" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Error Recovery and Resilience › should recover from temporary AI service disruptions" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Error Recovery and Resilience › should handle invalid message inputs gracefully" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Error Recovery and Resilience › should handle dialog state corruption gracefully" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Performance Under Load › should handle rapid message processing" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="End-to-End Dialog Flow Tests › Performance Under Load › should maintain performance with multiple concurrent dialogs" classname="e2e\dialog-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>